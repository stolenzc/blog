[{"content":"简介 Python3.6 发布于2016年12月23日，这儿总结一下改版本引入的一些新功能\n官方新特性链接 Python3.6 新特性\n安装 此处主要介绍在Ubuntu下安装 Python3.6\n添加deadsnakes源 sudo add-apt-repository ppa:deadsnakes/ppa sudo apt-get update 安装 Python3.6 sudo apt install python3.6-full 安装 Python3.6 的pip python3.6 -m ensurepip --upgrade f-string Python3.6 引入了一种 f-string 的方式来格式化字符串\n1 2 3 4 5 6 7 8 9 10 11 12 name = \u0026#34;Fred\u0026#34; f\u0026#34;He said his name is {name}.\u0026#34; # 输出： # He said his name is Fred. width = 10 precision = 4 value = 12.34567 f\u0026#34;result: {value:{width}.{precision}}\u0026#34; # 输出： # result: 12.35 # 备注：小数点也占10位中的一个字符宽度 变量注释的语法 在 Python3.5 中，引入了类型标注 Type Hint ，在 Python3.6 中又加入了函数参数的标注，包括实参和行参的标注\n1 2 3 4 5 6 7 8 from typing import List,Dict primes: List[int] = [] captain: str # 仅做类型标注，不初始化值 class Starship: stats: Dict[str, int] = {} 数字文字中的下划线 Python3.6 中在数字值之间使用下划线改善可读性\n1 num = 1_000_000_000_000_000 注意：\n单个下划线允许用在数码之间和任何数制指示符之后 不可以两个下划线连在一起 字符串格式化可以用 _ 或 _d 来用下划线表示千分位分隔符 f'{100000000:_}' 输出: 100_000_000 f'{100000000:_d}' 输出: 100_000_000 _b 、 _o 、 _x 可以让数字以二进制、八进制、十进制、十六进制每隔4个数码分割 f'{100000000:_x}' 输出: 5f5_e100 f'{128:_b}' 输出: 1000_0000 secrets 生成安全随机数字 Python3.6 中新增的 secrets 模块的主要目的是提供一种简单的方法来可靠地生成适用于管理秘密的加密强伪随机值，例如帐户身份验证、令牌等。\n1 2 3 4 5 6 import secrets secrets.token_bytes(16) # b\u0026#39;\\x12Z\\xebb\\xa0\\xab\\xca\\xc3W\\xbe\\xfdCFr\\x86\\xcd\u0026#39; secrets.token_hex(16) # a890afe1433b3044e1316fd7aa23787f 在 Python3.6 以下的版本则推荐使用 os.urandom()\n异步生成器 在 Python3.5 中引入了 async 和 await ，但是在 Python3.5 中无法在一个函数中同时使用 await 和 yield ，在 Python3.6 解决了这个问题\n1 2 3 4 5 async def ticker(delay, to): \u0026#34;\u0026#34;\u0026#34;Yield numbers from 0 to *to* every *delay* seconds.\u0026#34;\u0026#34;\u0026#34; for i in range(to): yield i await asyncio.sleep(delay) 异步推导 添加了对在列表、集合与字典推导式和生成器表达式中使用 async for 的支持\n1 result = [i async for i in aiter() if i % 2] await 表达式也在所有种类的推导式中得到支持\n1 result = [await fun() for fun in funcs if await condition()] 其他 将 Windows 文件系统编码和控制台编码都更改为 UTF-8 重新实现了字典 dict，使其内存使用减少了 20%-25% ","permalink":"https://blog.stolenzc.com/2022/python_3_6_feature/","summary":"简介 Python3.6 发布于2016年12月23日，这儿总结一下改版本引入的一些新功能 官方新特性链接 Python3.6 新特性 安装 此处主要介绍在Ubuntu下安装 Python3.6 添加dea","title":"Python3.6 新特性"},{"content":"前言 很久之前就想要将之前hexo的博客迁移到hugo上，主要原因一个是hexo的next主题使用了两年多了，两年来审美发生了很大变化，在偶然间发现了hugo的paper主题，感觉很好看，于是就想着迁移过去。还有一个原因是自己也想要体验一下hugo的搭建过程，看看hugo的优势在哪里。还有一个原因就是自己的hexo主题自己不太能够控制了，很多地方的配置因为当时特殊修改过导致现在已经不太敢去动了，来必力评论突然出现了大量的广告。实在是不能忍受。\n配置 使用了PaperMod主题，大部分配置都是参考hugo官方文档 和 PaperMod主题文档\n做了几个特殊的配置\n引入fontaewsome图标 复制主题目录中layouts/partials/head.html 文件到博客根目录 layouts/partials/head.html下，然后在head.html中引入以下代码\n1 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://use.fontawesome.com/releases/v5.15.4/css/all.css\u0026#34; integrity=\u0026#34;sha384-DyZ88mC6Up2uqS4h/KRgHuoeGwBcD4Ng9SiP4dIRy0EXTlnuz47vAwmeGwVChigm\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;/\u0026gt; 然后在配置的地方直接使用就可以了\n1 2 3 4 5 6 7 8 9 10 menu: main: - identifier: home name: 主页 url: / pre: \u0026lt;i class=\u0026#39;fa fa-home\u0026#39;\u0026gt;\u0026lt;/i\u0026gt; - identifier: tags name: 标签 url: tags/ pre: \u0026lt;i class=\u0026#39;fa fa-tags\u0026#39;\u0026gt;\u0026lt;/i\u0026gt; 默认情况下图标和汉字会紧挨着，可以在i标签中添加一个空格来解决 \u0026lt;i class='fa fa-tags'\u0026gt;\u0026amp;ensp;\u0026lt;/i\u0026gt;\n侧边栏目录 PaperMod主题默认的toc目录是在文章开头，作为目录始终感觉不太方便，这里参考 Hugo博客目录放在侧边 | PaperMod主题 中的方法将其修改为左边栏\n主要是修改toc.html文件\n创建文件 layouts/partials/toc.html，然后将toc.html中加入以下代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 {{- $headers := findRE \u0026#34;\u0026lt;h[1-6].*?\u0026gt;(.|\\n])+?\u0026lt;/h[1-6]\u0026gt;\u0026#34; .Content -}} {{- $has_headers := ge (len $headers) 1 -}} {{- if $has_headers -}} \u0026lt;aside id=\u0026#34;toc-container\u0026#34; class=\u0026#34;toc-container wide\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;toc\u0026#34;\u0026gt; \u0026lt;details {{if (.Param \u0026#34;TocOpen\u0026#34;) }} open{{ end }}\u0026gt; \u0026lt;summary accesskey=\u0026#34;c\u0026#34; title=\u0026#34;(Alt + C)\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;details\u0026#34;\u0026gt;{{- i18n \u0026#34;toc\u0026#34; | default \u0026#34;Table of Contents\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;/summary\u0026gt; \u0026lt;div class=\u0026#34;inner\u0026#34;\u0026gt; {{- $largest := 6 -}} {{- range $headers -}} {{- $headerLevel := index (findRE \u0026#34;[1-6]\u0026#34; . 1) 0 -}} {{- $headerLevel := len (seq $headerLevel) -}} {{- if lt $headerLevel $largest -}} {{- $largest = $headerLevel -}} {{- end -}} {{- end -}} {{- $firstHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers 0) 1) 0)) -}} {{- $.Scratch.Set \u0026#34;bareul\u0026#34; slice -}} \u0026lt;ul\u0026gt; {{- range seq (sub $firstHeaderLevel $largest) -}} \u0026lt;ul\u0026gt; {{- $.Scratch.Add \u0026#34;bareul\u0026#34; (sub (add $largest .) 1) -}} {{- end -}} {{- range $i, $header := $headers -}} {{- $headerLevel := index (findRE \u0026#34;[1-6]\u0026#34; . 1) 0 -}} {{- $headerLevel := len (seq $headerLevel) -}} {{/* get id=\u0026#34;xyz\u0026#34; */}} {{- $id := index (findRE \u0026#34;(id=\\\u0026#34;(.*?)\\\u0026#34;)\u0026#34; $header 9) 0 }} {{- /* strip id=\u0026#34;\u0026#34; to leave xyz, no way to get regex capturing groups in hugo */ -}} {{- $cleanedID := replace (replace $id \u0026#34;id=\\\u0026#34;\u0026#34; \u0026#34;\u0026#34;) \u0026#34;\\\u0026#34;\u0026#34; \u0026#34;\u0026#34; }} {{- $header := replaceRE \u0026#34;\u0026lt;h[1-6].*?\u0026gt;((.|\\n])+?)\u0026lt;/h[1-6]\u0026gt;\u0026#34; \u0026#34;$1\u0026#34; $header -}} {{- if ne $i 0 -}} {{- $prevHeaderLevel := index (findRE \u0026#34;[1-6]\u0026#34; (index $headers (sub $i 1)) 1) 0 -}} {{- $prevHeaderLevel := len (seq $prevHeaderLevel) -}} {{- if gt $headerLevel $prevHeaderLevel -}} {{- range seq $prevHeaderLevel (sub $headerLevel 1) -}} \u0026lt;ul\u0026gt; {{/* the first should not be recorded */}} {{- if ne $prevHeaderLevel . -}} {{- $.Scratch.Add \u0026#34;bareul\u0026#34; . -}} {{- end -}} {{- end -}} {{- else -}} \u0026lt;/li\u0026gt; {{- if lt $headerLevel $prevHeaderLevel -}} {{- range seq (sub $prevHeaderLevel 1) -1 $headerLevel -}} {{- if in ($.Scratch.Get \u0026#34;bareul\u0026#34;) . -}} \u0026lt;/ul\u0026gt; {{/* manually do pop item */}} {{- $tmp := $.Scratch.Get \u0026#34;bareul\u0026#34; -}} {{- $.Scratch.Delete \u0026#34;bareul\u0026#34; -}} {{- $.Scratch.Set \u0026#34;bareul\u0026#34; slice}} {{- range seq (sub (len $tmp) 1) -}} {{- $.Scratch.Add \u0026#34;bareul\u0026#34; (index $tmp (sub . 1)) -}} {{- end -}} {{- else -}} \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; {{- end -}} {{- end -}} {{- end -}} {{- end }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#{{- $cleanedID -}}\u0026#34; aria-label=\u0026#34;{{- $header | plainify -}}\u0026#34;\u0026gt;{{- $header | safeHTML -}}\u0026lt;/a\u0026gt; {{- else }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#{{- $cleanedID -}}\u0026#34; aria-label=\u0026#34;{{- $header | plainify -}}\u0026#34;\u0026gt;{{- $header | safeHTML -}}\u0026lt;/a\u0026gt; {{- end -}} {{- end -}} \u0026lt;!-- {{- $firstHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers 0) 1) 0)) -}} --\u0026gt; {{- $firstHeaderLevel := $largest }} {{- $lastHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers (sub (len $headers) 1)) 1) 0)) }} \u0026lt;/li\u0026gt; {{- range seq (sub $lastHeaderLevel $firstHeaderLevel) -}} {{- if in ($.Scratch.Get \u0026#34;bareul\u0026#34;) (add . $firstHeaderLevel) }} \u0026lt;/ul\u0026gt; {{- else }} \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; {{- end -}} {{- end }} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/aside\u0026gt; \u0026lt;script\u0026gt; let activeElement; let elements; window.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function (event) { checkTocPosition(); elements = document.querySelectorAll(\u0026#39;h1[id],h2[id],h3[id],h4[id],h5[id],h6[id]\u0026#39;); // Make the first header active activeElement = elements[0]; const id = encodeURI(activeElement.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.add(\u0026#39;active\u0026#39;); }, false); window.addEventListener(\u0026#39;resize\u0026#39;, function(event) { checkTocPosition(); }, false); window.addEventListener(\u0026#39;scroll\u0026#39;, () =\u0026gt; { // Check if there is an object in the top half of the screen or keep the last item active activeElement = Array.from(elements).find((element) =\u0026gt; { if ((getOffsetTop(element) - window.pageYOffset) \u0026gt; 0 \u0026amp;\u0026amp; (getOffsetTop(element) - window.pageYOffset) \u0026lt; window.innerHeight/2) { return element; } }) || activeElement elements.forEach(element =\u0026gt; { const id = encodeURI(element.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); if (element === activeElement){ document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.add(\u0026#39;active\u0026#39;); } else { document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.remove(\u0026#39;active\u0026#39;); } }) }, false); const main = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--article-width\u0026#39;), 10); const toc = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--toc-width\u0026#39;), 10); const gap = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--gap\u0026#39;), 10); function checkTocPosition() { const width = document.body.scrollWidth; if (width - main - (toc * 2) - (gap * 4) \u0026gt; 0) { document.getElementById(\u0026#34;toc-container\u0026#34;).classList.add(\u0026#34;wide\u0026#34;); } else { document.getElementById(\u0026#34;toc-container\u0026#34;).classList.remove(\u0026#34;wide\u0026#34;); } } function getOffsetTop(element) { if (!element.getClientRects().length) { return 0; } let rect = element.getBoundingClientRect(); let win = element.ownerDocument.defaultView; return rect.top + win.pageYOffset; } \u0026lt;/script\u0026gt; {{- end }} 新建文件 assets/css/extended/blank.css，内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 :root { --nav-width: 1380px; --article-width: 650px; --toc-width: 300px; } .toc { margin: 0 2px 40px 2px; border: 1px solid var(--border); background: var(--entry); border-radius: var(--radius); padding: 0.4em; } .toc-container.wide { position: absolute; height: 100%; border-right: 1px solid var(--border); left: calc((var(--toc-width) + var(--gap)) * -1); top: calc(var(--gap) * 2); width: var(--toc-width); } .wide .toc { position: sticky; top: var(--gap); border: unset; background: unset; border-radius: unset; width: 100%; margin: 0 2px 40px 2px; } .toc details summary { cursor: zoom-in; margin-inline-start: 20px; padding: 12px 0; } .toc details[open] summary { font-weight: 500; } .toc-container.wide .toc .inner { margin: 0; } .active { font-size: 110%; font-weight: 600; } .toc ul { list-style-type: circle; } .toc .inner { margin: 0 0 0 20px; padding: 0px 15px 15px 20px; font-size: 16px; /*目录显示高度*/ max-height: 83vh; overflow-y: auto; } .toc .inner::-webkit-scrollbar-thumb { /*滚动条*/ background: var(--border); border: 7px solid var(--theme); border-radius: var(--radius); } .toc li ul { margin-inline-start: calc(var(--gap) * 0.5); list-style-type: none; } .toc li { list-style: none; font-size: 0.95rem; padding-bottom: 5px; } .toc li a:hover { color: var(--secondary); } 不足 虽然hugo一切都很好，但有一个很难受的问题，在hexo中，可以通过hexo-blog-encrypt插件来对文章进行加密，但是在hugo中不支持插件，找到了一个可以加密的工具hugo-encryptor，但是只支持对文字部分内容加密，还没有更好的方法对文字全文进行加密。我会不断探索，如果读者有更好的建议也可以联系我。\n","permalink":"https://blog.stolenzc.com/2022/hugo/","summary":"前言 很久之前就想要将之前hexo的博客迁移到hugo上，主要原因一个是hexo的next主题使用了两年多了，两年来审美发生了很大变化，在偶然","title":"Hugo博客搭建"},{"content":"OAuth介绍 OAuth2.0官方文档\nOpen Standard Authorization (OAuth) OAuth是一个网络开放协议。为保证用户资源的安全授权提供了简易的标准 特点：\n简单：不管是OAUTH服务提供者还是应用开发者，都很易于理解与使用 安全：没有涉及到用户密钥等信息，更安全更灵活 开放：任何服务提供商都可以实现OAUTH，任何软件开发商都可以使用OAuth OAuth2.0 2012年10月，OAuth 2.0协议正式发布为RFC 6749 OAuth协议的下一版本，但不向后兼容OAuth 1.0 OAuth 2.0关注客户端开发者的简易性，同时为Web应用，桌面应用和手机，和起居室设备提供专门的认证流程 OAuth2.0角色 resource owner: 资源所有者，指的是用户\nresource server: 资源服务器，指的是应用服务器\nclient: 客户端，指的是应用\nauthorization server: 授权服务器，指的是应用服务器\nOAuth2.0流程 +--------+ +---------------+ | |--(A)- Authorization Request -\u0026gt;| Resource | | | | Owner | | |\u0026lt;-(B)-- Authorization Grant ---| | | | +---------------+ | | | | +---------------+ | |--(C)-- Authorization Grant --\u0026gt;| Authorization | | Client | | Server | | |\u0026lt;-(D)----- Access Token -------| | | | +---------------+ | | | | +---------------+ | |--(E)----- Access Token ------\u0026gt;| Resource | | | | Server | | |\u0026lt;-(F)--- Protected Resource ---| | +--------+ +---------------+ A: 客户端向资源所有者请求授权。这授权请求可以直接向资源所有者提出，或者最好通过授权间接服务器作为中介\nB: 客户端收到授权授权，这是一个代表资源所有者授权的凭证\nC: 客户端通过身份验证请求访问令牌 授权服务器并提供授权许可\nD: 授权服务器对客户端进行身份验证并验证授权，如果有效，则颁发访问令牌\nE: 客户端向资源请求受保护的资源 服务器并通过提供访问令牌进行身份验证\nF: 资源服务器验证访问令牌，如果有效，则提供资源\nOAuth2.0授权类型 授权码（Authorization Code） 隐藏式（implicit） 密码式（password） 客户端凭证（client credentials） 授权码授权类型（Authorization Code） 第三方应用先申请一个授权码，再通过授权码获取访问令牌。适合有后端的应用，比如网站应用。\nscope参数\n步骤：\nA网站提供一个链接，链接中包含本网站的跳转地址、网站的身份（client_id或app_key），点击后跳转到B网站 B网站进行登陆，登陆成功后，跳转到A网站，并且在URL中携带一个授权码 A网站拿到授权码，在后端携带授权码来请求A网站的接口（携带授权码、appkey、secretkey） B站收到请求，验证授权码，如果验证成功，则返回访问令牌，重刷令牌（access_token, refresh_token） 通常请求格式为: https://stolenzc.com/oauth/authorize?response_type=code\u0026amp;appkey=appkey\u0026amp;redirect_uri=redirect_uri\u0026amp;scope=scope\nresponse_type: 授权类型，必须为code appkey: 网站的身份，为应用在网站申请的appkey redirect_uri: 申请成功后网站的回跳地址 scope: 网站的范围，可以为空，为空则表示全部范围，可以为多个范围，用逗号分隔 响应格式: 在回跳地址中携带授权码，比如：https://stolenzc.com/callback?code=1234567890\n后台再请求令牌的格式: https://stolenzc.com/oauth/token?appkey=appkey\u0026amp;appsecret=appsecret\u0026amp;grant_type=authorization_code\u0026amp;code=code\u0026amp;redirect_uri=redirect_uri\ngrant_type: 授权类型，必须为authorization_code appkey: 网站的身份，为应用在网站申请的appkey appsecret: 网站的身份，为应用在网站申请的appsecret,appsecret为保密的，所以只能在后端请求 code: 授权码 redirect_uri: 验证成功后授权方带上token数据请求该uri地址传递token数据 隐藏式授权类型（implicit） 第三方应用请求接口直接获取访问令牌。适合没有后端的应用，比如移动应用。\n步骤：\nA网站提供一个链接，链接中包含本网站的跳转地址、网站的身份（client_id或app_key），点击后跳转到B网站 B网站进行登陆，登陆成功后，跳转到A网站，并且在URL中以锚点的形式携带一个访问令牌 通常请求格式为: https://stolenzc.com/oauth/authorize?response_type=token\u0026amp;appkey=appkey\u0026amp;redirect_uri=redirect_uri\u0026amp;scope=scope\nresponse_type: 授权类型，必须为token appkey: 网站的身份，为应用在网站申请的appkey redirect_uri: 申请成功后网站的回跳地址 scope: 网站的范围，可以为空，为空则表示全部范围，可以为多个范围，用逗号分隔 密码式授权类型（password） 第三方应用拿到用户账号密码，直接用账号密码获取令牌\nA网站要求用户提供账号和密码，拿到后A网站直接向B网站请求令牌 B网站验证密码后，直接返回令牌，不需要进行跳转 请求令牌的格式: https://stolenzc.com/oauth/token?appkey=appkey\u0026amp;grant_type=password\u0026amp;username=username\u0026amp;password=password\ngrant_type: 授权类型，必须为password appkey: 网站的身份，为应用在网站申请的appkey username: 用户名 password: 密码 凭证式授权类型（client credentials） 凭证式适用于没有前端的命令行应用，通常是多个用户享用一个令牌，通常针对第三方应用，不是针对用户的。\nA应用在命令行向B应用发出接口请求，只需要携带appkey和secretkey即可 B应用验证通过后，直接返回令牌 请求令牌的格式: https://stolenzc.com/oauth/token?grant_type=client_credentials\u0026amp;appkey=appkey\u0026amp;secretkey=secretkey\ngrant_type: 授权类型，必须为client_credentials appkey: 网站的身份，为应用在网站申请的appkey secretkey: 网站的身份，为应用在网站申请的appsecret 使用令牌和令牌过期 后续请求资源的时候，需要将令牌放在请求头中携带\n通常在申请令牌的时候，会同时返回一个refresh_token，用来在token失效的时候，重新申请一个新的令牌。\n重刷令牌的格式: https://stolenzc.com/oauth/token?grant_type=refresh_token\u0026amp;appkey=appkey\u0026amp;secretkey=secretkey\u0026amp;refresh_token=refresh_token\ngrant_type: 授权类型，必须为refresh_token appkey: 网站的身份，为应用在网站申请的appkey secretkey: 网站的身份，为应用在网站申请的appsecret refresh_token: 重刷令牌 ","permalink":"https://blog.stolenzc.com/2022/oauth2/","summary":"OAuth介绍 OAuth2.0官方文档 Open Standard Authorization (OAuth) OAuth是一个网络开放协议。为保证用户资源的安全授权提供了简易的标准 特点： 简单：不管是OAU","title":"OAuth2.0认证"},{"content":"HTTPS传输的加密使用 https在进行内容传输的时候使用的是对称加密\nhttps在进行证书验证阶段使用的是非对称加密\nHTTP与HTTPS的区别 默认端口，HTTP是80，HTTPS是443 传输协议，http是超文本传输协议，属于明文传输；https是安全的超文本传输协议，是经过SSL加密后的传输协议 安全性，https使用了TLS/SSL，比http更安全 证书，https需要申请ca证书 HTTPS的加密是在传输层完成的，因为SSL是位于传输层的，TLS的前身是SSL。 HTTP的通信过程 作为标准的C/S模型，http协议总是由客户端发起，服务器进行响应。\nDNS解析，域名系统DNS将域名解析成IP地址 建立TCP连接，进行TCP的三次握手 浏览器发送请求 服务器响应浏览器，向浏览器发送数据 通信完成，TCP连接关闭 HTTPS的通信过程 https主要在http的2和3之间，建立了一个加密的连接，这个连接使用了TLS/SSL协议，它是一个安全的传输协议，它的加密使用了对称加密，而不是非对称加密。\n通信过程如下 ：\nDNS解析，域名系统DNS将域名解析成IP地址 客户端和服务器端通过TCP建立连接，并发送https请求。 客户端发起TLS握手，向服务端发送ClientHello消息， 客户端支持的SSL/TLS版本 客户端支持的加密套件，比如RSA加密算法 会话session id，（如果有的值的话，服务器端会复用对应的握手信息，避免短时间内重复握手） 客户端随机数，用于生成随机密钥 服务器收到ClientHello消息，向客户端发送ServerHello消息 服务器所能支持的最高SSL/TLS版本 服务器选择的加密套件列表，比如RSA加密算法 服务器随机数，用于生成随机密钥 服务器的ca证书 客户端收到ServerHello后，会对收到的证书进行验证。包括验证证书机构、有效期等，验证证书的合法性验证 验证成功后，Client生成随机数，用于密钥交换过程。客户端会从数字证书中取出服务器的公钥，然后使用它加密报文该随机数，发送到服务器 服务器使用私钥解密。获取客户端发送的随机数 客户端使用这三个随机数一起计算出对称加密密钥，同理服务端也可以计算出这个加密密钥。客户端和服务端都计算出加密密钥master secret 客户端用master secret加密了一条握手完成的消息发送给服务器 服务器端也回发了一条用master secret加密的握手完成的消息 服务器将发送的内容用master secret加密，然后发送给客户端 客户端使用master secret解密收到的消息 ","permalink":"https://blog.stolenzc.com/2022/https/","summary":"HTTPS传输的加密使用 https在进行内容传输的时候使用的是对称加密 https在进行证书验证阶段使用的是非对称加密 HTTP与HTTPS的区","title":"HTTPS加密原理"},{"content":" 说明：以 classmethod 开头表示类方法，不以 classmethod 开头表示对象方法\ndatetime.timezone class datetime.timezone(offset, name=None)\noffset需要指定一个timedelta对象，表示与UTC时间的差值，范围在 -timedelta(hours=24) 到 timedelta(hours=24) 之间，注意这两个值不能取 timezone.utc\n返回一个timezone对象，表示获取utc时区，等同于 datetime.timezone(deltatime(0)) 这是一个类属性（准确说是一个变量），不能在后面加括号调用 datetime.datetime class datetime.datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0)\nyear、month、day 值是必须的，tzinfo可以为None，也可以为tzinfo的一个实例 classmethod datetime.now(tz=None)\n获取当前时间，返回一个datetime对象，默认tzinfo为None，表示本地时区，可以手动指定时区 classmethod datetime.today()\n获取本地当前时间，相当于now(tz=None) classmethod datetime.utcnow()\n获取utc时区的当前时间，tzinfo为None classmethod datetime.strptime(date_string, format)\n将字符串解析为datetime时间，format表示date_string的格式 datetime.strftime(format)\n返回一个字符串，由format控制格式 classmethod datetime.fromtimestamp(timestamp, tz=None)\n将时间戳转换为datetime格式，不指定tz则为本地时区时间。 classmethod datetime.utcfromtimestamp(timestamp)\n将时间戳转换为datetime格式的utc时区时间 datetime.timestamp()\n返回datetime对应的时间戳 classmethod datetime.combine(date, time, tzinfo=self.tzinfo)\n将时间、日期组成一个datetime格式的时间 datetime.year/month/day/hour/minute/second/microsecond/tzinfo\n获取datetime的部分时间信息 datetime.date()/time()\n获取datetime的时间或日期信息 datetime.weekday()\n返回时间对应的星期，星期一为0，星期天为6 datetime.isoweekday()\n以整数形式返回星期，星期一为1，星期天为7 django.utils.timezone utc\n获取utc时区的tzinfo实例（可以赋值给tz） now()\n获取当前时间，使用时区为UTC时区 get_current_timezone()\n获取本地时区的tzinfo实例 localtime(value=None, timezone=None)\n将带时区的datetime转换为指定时区的datetime value是带时区的datetime类型，默认为now() timezone默认为本地时区 localdate(value=None, timezone=None)\n将带时区的datetime转换为指定时区的date value是带时区的datetime类型，默认为now() timezone默认为本地时区 is_aware(value)\n是否有时区，value为datetime类型，tzinfo不为None返回True is_naive(value)\n是否无时区，和is_aware相反 make_aware(value, timezone=None, is_dst=None)\n将无时区的datetime转换为有时区的datetime， value是一个没有时区的datetime类型，timezone为None则默认使用本地时区 make_naive(value, timezone=None)\n将有时区的datetime转换为无时区的datetime value是一个有时区的datetime，会先把时间转换到指定时区的时间，然后去除时区信息 timezone为None默认使用本地时区 ","permalink":"https://blog.stolenzc.com/2021/python_datetime/","summary":"说明：以 classmethod 开头表示类方法，不以 classmethod 开头表示对象方法 datetime.timezone class datetime.timezone(offset, name=None) offset需要指定一个timedelta对象，表示与UTC时间的差值，范围在 -timedelta(hours=24) 到 timedelta(hours=24)","title":"Python中时间操作"},{"content":"网络互联模型 层数 OSI七层参考模型 TCP/IP协议模型 学习研究模型 请求过程数据封装 7 应用层(Application) 应用层(Application) 应用层(Application) (5) 6 表示层(Presentation) 5 会话层(Session) 4 运输层(Transport) 运输层(Transport) 运输层(Transport) (4)(5) 3 网络层(Network) 网际层(Internet) 网络层(Network) (3)(4)(5) 2 数据链路层(Data Link) 网络接口层(Network Access) 数据链路层(Data Link) (2)(3)(4)(5)(2) 1 物理层(Physical) 物理层(Physical) (1)(2)(3)(4)(5)(2) 数据通信方式 首先知道对方ip 知道ip后发送ARP广播请求，获取对方mac地址 发送数据到指定mac地址，网卡发现mac地址是自己就向网络模型上层传递处理，不是自己就会丢掉 计算机之间的连接方式 两个相同的设备之间使用交叉线，不同的设备使用直通线\n同轴电缆：一根总线。总线两端需要中介电阻，计算机通过T型连接器接到总线上，\n半双工通信 容易冲突 集线器(Hub)：所有节点集中在一个节点上\n半双工通信 容易冲突 不安全 和同轴电缆类似 网桥(Bridge)：\n能够通过自学习得知每个接口那侧的MAC地址 可以隔绝冲突域，网桥一侧内部发送数据不会影响其他侧 交换机(Switch)：\n相当于更多的网桥 全双工通信 比集线器安全 网线直连、同轴电缆、网桥、交换机、集线器：\n连接的设备必须在同一网段 连接的设备处在同一广播域 路由器(Router)：\n可以在不同的网段之间转发数据 可以隔绝广播域 网络相关名词 MAC地址(Media Access Control Address)\n全球唯一标识\n前三个字节是组织唯一标识OUI(Organizationally Unique Identifyer)，\n后六位为网络接口标识（厂商自行分配）\nOUI查询：查询地址1、查询地址2\nMAC地址48位全为1时表示广播地址\nMAC地址可在操作系统层面上进行修改\n当不知道对方当MAC地址时，可以通过ARP广播方式获取对方当MAC地址\n获取成功后，会缓存IP地址、MAC地址的映射信息，俗称：ARP缓存\n通过ARP广播获取的MAC地址，属于动态(dynamic)缓存，存储时间较短，通常为2分钟\narp -a [主机地址] - 查询ARP缓存\narp -d [主机地址] - 删除ARP缓存\narp -s 主机地址 MAC地址 - 增加一条（静态）缓存信息\nIP地址(Internet Protocol Address)\n互联网上每个主机都有一个IP地址 IP地址分为IPv4和IPv6，IPv4地址已经用完 IPv4 32bit（4字节） IPv6 128bit（16字节） IP地址由两部分组成：网络标识（网络ID）、主机标识（主机ID） 同一网段都计算机，网络ID相同 通过子网掩码，可以算出网络ID：子网掩码 \u0026amp; IP地址 计算机和其他计算机通讯，会先判断是否时同一个网段中的，同一网段不需要路由器转发，不同网段需要路由器转发 判断ip是否和自己在同一个网段是用自己的子网掩码 \u0026amp; 其他IP，网段是否一样。 IP地址分类\nA类地址：默认子网掩码是255.0.0.0，网络ID是以0开头，网络ID占8位，主机ID占24位\nA类地址网络ID不能为0，127为保留字段，所以A类地址网络ID取值范围为1-126 B类地址：默认子网掩码是255.255.0.0，网络ID是以10开头，网络ID占16位，主机ID占16位\nB类地址网络ID取值范围为128-191 C类地址：默认子网掩码是255.255.255.0，网络ID是以110开头，网络ID占24位，主机ID占8位\nC类地址网络ID取值范围为192-223 D类地址：以1110开头，没有子网掩码，多播地址\nD类地址网络ID取值范围为224-239 E类地址：以1111开头，保留为今后使用\nE类地址网络ID取值范围为240-255 只有ABC类地址才能分配给主机\n主机ID为全0，表示主机所在的网段\n主机ID为全1，表示主机所在网段的全部主机（广播）\n子网掩码CIDR(Classless Inter-Domain Routing)表示法\n192.168.1.100/24 代表子网掩码有24个1，即255.255.255.0 144.168.1.100/16 代表子网掩码有16个1，即255.255.0.0 网络划分\n子网：将子网掩码在原基础上添加1的个数 超网：将子网掩码在原基础上减少1的个数 判断子网和超网：根据网络类型划分判断子网掩码中1的个数添加了还是减少了 路由\n在不同网段之间转发数据，需要有路由器的支持 默认情况下，路由器只知道和它直连的网段，非直连的网段需要通过静态路由、动态路由获取 静态路由：管理员手动添加，只适用于小规模网络，网络和子网掩码配置为目标ip的网段，可以全设置为0表示全网段，下一跳表示访问的路由器地址 动态路由：通过路由选择协议(RIP、OSPF)自动获取，适用于大规模网络 ","permalink":"https://blog.stolenzc.com/2021/test_network_improve/","summary":"网络互联模型 层数 OSI七层参考模型 TCP/IP协议模型 学习研究模型 请求过程数据封装 7 应用层(Application) 应用层(Applicat","title":"网络技术提升"},{"content":"通用跨平台软件介绍和一些配置\nHyper 简介：一款界面美观的terminal命令行工具，基于Electorn开发，三大桌面平台均支持，而且支持插件安装，方便扩展功能。\n下载地址：官网，github\n常用命令：\nhyper i 插件名称 - 安装插件 hyper u 插件名称 - 卸载插件 hyper --help - 查看更多命令 常用插件：\nhypercwd - 让你打开新的Tab页时自动保持上一个Tab页的路径。 hyper-search - 使用command + f对命令行窗口里的内容全文检索。 hype-pane - 同时显示多个命令行面板 更多插件和主题\n配置文件地址：\nMac: ~/Library/Application Support/Hyper/.hyper.js Windows: $Env:AppData/Hyper/.hyper.js Linux: ~/.config/Hyper/.hyper.js 快捷使用：\ncommand + ⬅️\\➡️ - 快速到行首\\尾 ","permalink":"https://blog.stolenzc.com/2020/software_manual/","summary":"通用跨平台软件介绍和一些配置 Hyper 简介：一款界面美观的terminal命令行工具，基于Electorn开发，三大桌面平台均支持，而且支持插件安装","title":"Software Manual"},{"content":"MySQL索引相关内容\n存储引擎 数据结构可视化查看\n聚合索引和分散索引 B+树结构\nhash索引 特点：对索引对key值进行一次hash计算就可以定位数据存储的位置 精确查找时效率高 问题：仅支持 = 和 in，不支持范围查找 hash冲突问题\n事务 MVCC MVCC:Multi Version Concurrency Control（多版本并发控制）\nMVCC的定义源码\nMVCC只在 Read Committed 和 Repeatable Read两个隔离级别下工作。Read Uncommitted总是读取最新的记录行，Serializable 会对所有读取的记录行都加锁。\nMCVV 的实现：隐藏字段、Read View、Undo log\n隐藏字段\nDB_TRX_ID(6字节)：表示最近一次对本记录行作修改（insert|update）的事务ID。至于delete操作，InnoDB认为是一个update操作，不过会更新一个另外的删除位，将行表示为deleted。并非真正删除。 DB_ROLL_PTR(7字节)：回滚指针，指向当前记录行的undo log信息 DB_ROW_ID(6字节)：随着新行插入而单调递增的行ID。理解：当表没有主键或唯一非空索引时，innodb就会使用这个行ID自动产生聚簇索引。如果表有主键或唯一非空索引，聚簇索引就不会包含这个行ID了。这个DB_ROW_ID跟MVCC关系不大。 官方文档：15.3 InnoDB Multi-Versioning\nRead View（读视图）结构\n和快照、snapshot是类似的概念。主要是用来做可见性判断的, 里面保存了“对本事务不可见的其他活跃事务”。\nRead View的定义源码，其中包括主要的几个变量\nlow_limit_id：目前出现过的最大的事务ID+1，即下一个将被分配的事务ID。 up_limit_id：活跃事务列表trx_ids中最小的事务ID，如果trx_ids为空，则up_limit_id 为 low_limit_id。 trx_ids：Read View创建时其他未提交的活跃事务ID列表。意思就是创建Read View时，将当前未提交事务ID记录下来，后续即使它们修改了记录行的值，对于当前事务也是不可见的。Read View中trx_ids的活跃事务，不包括当前事务自己和已提交的事务（正在内存中） creator_trx_id：当前创建事务的ID，是一个递增的编号。（这个编号并不是DB_ROW_ID） Undo log\nUndo log中存储的是老版本数据，当一个事务需要读取记录行时，如果当前记录行不可见，可以顺着undo log链找到满足其可见性条件的记录行版本。\n大多数对数据的变更操作包括 insert/update/delete，在InnoDB里，undo log分为如下两类：\ninsert undo log : 事务对insert新记录时产生的undo log, 只在事务回滚时需要, 并且在事务提交后就可以立即丢弃。 update undo log : 事务对记录进行delete和update操作时产生的undo log，不仅在事务回滚时需要，快照读也需要，只有当数据库所使用的快照中不涉及该日志记录，对应的回滚日志才会被purge线程删除。 Purge线程：为了实现InnoDB的MVCC机制，更新或者删除操作都只是设置一下旧记录的deleted_bit，并不真正将旧记录删除。 为了节省磁盘空间，InnoDB有专门的purge线程来清理deleted_bit为true的记录。purge线程自己也维护了一个read view，如果某个记录的deleted_bit为true，并且DB_TRX_ID相对于purge线程的read view可见，那么这条记录一定是可以被安全清除的。\n参考文档：MySQL中MVCC的正确打开方式（源码佐证）\n日志 锁 普通select 1.读未提交，读提交，可重复读 不加锁，快照读 2.串行化，普通select会升级为select … in share mode\n加锁select select … for update select … in share mode 1.唯一索引，唯一条件 记录锁(Record Locks) 2.其他的查询条件和索引条件 间隙锁(Gap Locks)与临键锁(Next-Key Locks)\nupdate与delete 1.唯一索引，唯一条件 记录锁(Record Locks) 2.其他， 排他临键锁(Next-Key Locks)\ninsert 排它锁、同时，会在插入区间加插入意向锁(insert intention lock)。\n","permalink":"https://blog.stolenzc.com/2020/test_mysql_improve/","summary":"MySQL索引相关内容 存储引擎 数据结构可视化查看 聚合索引和分散索引 B+树结构 hash索引 特点：对索引对key值进行一次hash计算就可以定位","title":"MySQL索引原理"},{"content":"Node使用和管理相关方法和命令 nvm 安装 wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\nnvm配置源 sudo find / -name nvm.sh - 找到nvm.sh文件的位置。通常在 ~/nvm/nvm.sh 下\n找到 NVM_NODEJS_ORG_MIRROR 将后面的地址改为https://npm.taobao.org/mirrors/node/\nnvm管理版本 nvm list - 查看本地安装的所有版本\nnvm install 11.0.0 - 安装指定版本node\nnvm install stable - 安装最新稳定版\nnvm use 11.0.0 - 切换版本\nnvm alias default 11.0.0 - 设置默认版本\nnvm uninstall 11.0.0 - 卸载指定版本\nnvm on - 开启版本切换\nnvm off - 关闭版本切换\nnode -v - 查看当前版本\nnpm使用 npm config set registry http://registry.npm.taobao.org - 设置镜像地址为淘宝\nnpm config get registry - 查看镜像地址\n","permalink":"https://blog.stolenzc.com/2020/node/","summary":"Node使用和管理相关方法和命令 nvm 安装 wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash nvm配置源 sudo find / -name nvm.sh - 找到nvm.sh文件的位置。通常在 ~/nvm/nvm.sh 下 找到 NVM_NODEJS_ORG_MIRROR 将后面的地址改为http","title":"Node使用及其管理"},{"content":"💡VIM从入门到精通 1. 汇总操作 退出VIM 通过命令行模式退出\n命令 说明 命令 说明 :q 退出 :q! 强制退出，不保存 :wq 保存并退出 :wq! 强制保存并退出 :w \u0026lt;文件路径\u0026gt; 另存为 :saveas 文件路径 另存为 :x 保存并退出 shift + zz 保存并退出 普通模式进入命令行模式 命令 说明 命令 说明 i 在当前光标处进行编辑 I 在行首插入 a 在光标后插入编辑 A 在行末插入 o 在当前行后插入一个新行 O 在当前行前插入一个新行 2. 普通模式 移动游标 按键 说明 按键 说明 h 左 l 右（小写 L） j 下 k 上 b 移动到上一个单词 w 移动到下一个单词 删除内容 命令 说明 命令 说明 x 删除游标所在的字符 X 删除游标所在前一个字符 Delete 同x dd 删除整行 d$或D 删除至行尾 d^ 删除至行首 dG 删除到文档结尾处 d1G 删至文档首部 dw或daw 删除一个单词（不适用中文）(delete a word) :%d 删除所有 重复命令 命令 说明 命令 说明 . 重复上一次操作 10x 删除10个连续字符 3dd 删除3行文本 dnw 删除n个单词 快速跳转 命令 说明 命令 说明 gg 游标移动到到第一行 G(Shift+g) 到最后一行 Ctrl + o 回到上次光标所在位置 nG(n Shift+g) 游标移动到第 n 行 行内跳转 命令 说明 命令 说明 e 到当前单词的结尾 w 到下一个单词的开头 b 到前一个单词的开头 ge 到前一个单词的结尾 0或^ 到行头 $ 到行尾 f\u0026lt;字母\u0026gt; 向后搜索\u0026lt;字母\u0026gt;并跳转到第一个匹配的位置(非常实用) F\u0026lt;字母\u0026gt; 向前搜索\u0026lt;字母\u0026gt;并跳转到第一个匹配的位置 t\u0026lt;字母\u0026gt; 向后搜索\u0026lt;字母\u0026gt;并跳转到第一个匹配位置之前的一个字母(不常用) T\u0026lt;字母\u0026gt; 向前搜索\u0026lt;字母\u0026gt;并跳转到第一个匹配位置之后的一个字母(不常用) 复制和粘贴 命令 说明 命令 说明 y 复制 dd 剪切 yy 复制整行 3yy 复制三行 y^或y0 复制至行首，不含光标字符 y$ 复制至行未，含光标所在 yw 复制一个单词 y2w 复制两个单词 yG 复制至文本末 y1G 复制至文本开头 p（小写） 粘贴至光标后 P（大写） 粘贴至光标前 替换 命令 说明 命令 说明 r+\u0026lt;待替换字母\u0026gt; 将游标所在字母替换为指定字母 R 连续替换，直到按下Esc cc 替换整行，即删除游标所在行，并进入插入模式 cw 替换一个单词，即删除一个单词，并进入插入模式 C(大写) 替换游标以后至行末 ~ 反转游标所在字母大小写 u{n} 撤销一次或 n 次操作（undo） U(大写) 撤销当前行的所有修改 Ctrl+r redo，即撤销 undo 的操作 :%!sort 对内容排序(将一行内容看成一个字符串，然后按字符串大小进行排序) 命令底行模式替换公式：\n:起始位置,终止位置s/被替换对象/替换内容/参数\n起始位置：默认为1，.代表当前位置\n终止位置：默认为$，可以使用具体的行号，+2表示向后两行\n参数：g 全局匹配，i 忽略大小写，c 替换时提示，e 忽略错误\n示例：:s/foo/bar/g 全局将foo替换为bar，:5,12s/foo/bar/g 替换5到12行，:.,+2s/foo/bar/g 替换当前位置到后两行，:'\u0026lt;,'\u0026gt;s/foo/bar/g 可视模式下替换选中区域\n快速缩进 命令 说明 命令 说明 \u0026gt;\u0026gt; 向右缩进 \u0026lt;\u0026lt; 向左回退 快速查找 命令 说明 命令 说明 / 向下查找 ? 向上查找 \\* 查找游标所在处的单词，向下查找 \\# 查找游标所在处的单词，向上查找 g\\* 查找游标所在处的单词，向下查找，部分符合即可 g\\# 查找游标所在处的单词，向上查找，部分符合即可 备注：n为向下找，N为向上找，查找内容支持正则表达式，但是表示次数的符号前需要使用\\，如:/\\d\\{2,3}，:/a\\+\n3. 命令行模式 命令 说明 :ce （center）文本居中 :ri （right）文本有对齐 :le （left）文本左对齐 :noh 退出搜索 :set hls 设置搜索高亮 :set shiftwidth=n 设置缩进和回退字符数 :set nu 显示行号 :set autoindent(ai) 设置自动缩进 :set autowrite(aw) 设置自动存档 :set background=dark/light 设置背景风格 :set backup(bk) 设置自动备份 :set cindent(cin) 设置C语言风格缩进 :set或:se 显示所有修改过的配置 :set all 显示所有设定值 :set \u0026lt;option\u0026gt;? 显示option的设定值 :set nooption 取消当前设定值 :syntax on 设置语法高亮 :set tabstop=4或:set ts=4 设置tab键对应的空格数 :set expandtab 设置tab自动替换为空格 :set nohls或:nohlsearch 设置不高亮选中单词 :set clipboard+=unnamed 设置与当前设备共享剪贴板 :set cul/:set cuc 设置高亮行/列 imap \u0026lt;F4\u0026gt; if __name__ == '__main__': 设置快捷键映射 inoremap _main if __name__ == '__main__': 设置不递归调用映射 :set pastetoggle 粘贴切换（粘贴中自动缩进的问题） :set ruler 设置显示光标位置 4. 高级功能 多文件编辑 命令 说明 vim 1.txt 2.txt 同时打开多个文件 vim -d 1.txt 2.txt 比较多个文件 :n/:N 切换到下/上一个文件 :n!/:N! 强制切换到下/上一个文件，之前的文件输入不保存 :e 3.txt 再打开一个文件 :e# 回到前一个文件 :ls 列出以前编辑过的文档 :b 2.txt或编号 直接跳转到该文件进行编辑 :bd 2.txt或编号 删除以前编辑过的列表中的文件项目 e! 4.txt 新打开文件，并放弃正在编辑的内容 :f 显示正在编辑的文件名 f new.txt 给正在编辑的文件重命名 vim -r :ewcover 1.txt 因断电等原因没有保存的文件恢复方式 可视模式 命令 说明 v 进入可视模式，光标走过位置被选中，再次按v取消 Shift+v 进入可视模式，按行进行选中，再次按Shift+v取消 Ctrl+v 进入可视模式，按矩形区域进行选中，再次按Ctrl+v取消 d 可视模式下删除选区内容 y 可视模式下复制选取内容 视窗操作 命令 说明 :new 打开一个新的水平视窗 vsp 2.txt 打开新的垂直分屏视窗来编辑 1.txt :sp 1.txt 打开新的水平分屏视窗来编辑 1.txt Ctrl+w s 将当前窗口分割成两个水平的窗口 Ctrl+w v 将当前窗口分割成两个垂直的窗口 Ctrl+w q 即 :q 结束分割出来的视窗。如果在新视窗中有输入需要使用强制符！即:q! Ctrl+w o 打开一个视窗并隐藏之前的所有视窗 Ctrl+w j 移至下面视窗 Ctrl+w k 移至上面视窗 Ctrl+w h 移至左边视窗 Ctrl+w l 移至右边视窗 Ctrl+w J 将当前视窗移至下面 Ctrl+w K 将当前视窗移至上面 Ctrl+w H 将当前视窗移至左边 Ctrl+w L 将当前视窗移至右边 Ctrl+w - 减小视窗的高度 Ctrl+w + 增加视窗的高度 给文件加密 命令 说明 vim -x 文件名 输入您的密码，确认密码。下次打开就会要求输入密码 执行外部命令 命令 说明 :!ls 显示当前目录的内容 :!rm FILENSME 删除名为FILENAME的文件 w FILENAME 将当前正在编辑的文件另存为FILENAME的文件 帮助系统 命令 说明 F1 普通模式打开vim预设的帮助文档 :h shiftwidth 打开名为shiftwidth的帮助文件 :ver或:version 显示版本号及参数 录制宏 命令 说明 q+任意字母 开始录制宏，再次按q取消录制 @+录制前输入的字母 播放宏 5. 操作实例 录制宏步骤 步骤：\n在底行模式下输入qa后敲回车。其中a表示该宏的名称，可以自定义其他名称 接下来进行vim的操作，该操作会被完整的录制下来。 做完操作后回到底行模式按q结束录制。 如果需要播放就使用@a，a表示录制之前给宏取的名字。 实际使用示例：\n在安装ArchLinux的时候，有一步需要将所有中国的镜像源提取到最前面去，但是所有中国的镜像源又分布在文件不同的位置，此时就可以使用VIM的宏来进行操作\n在normal模式下按qa，然后敲回车 然后输入/China从当前行向下查找China字符 在找到的地方使用2dd剪切两行，4gg跳到第四行，p进行粘贴 按q结束录制 再输入@a就会重复2、3步骤 多行注释 注释：\nctrl+v - 进入可视化块模式 上下移动光标选中需要注释的代码 I(大i) - 进入插入模式 输入注释符号 按ese键完成 取消注释：\nctrl+v - 进入可视化块模式 上下移动光标选中需要注释的代码 按小d即可取消注释 ","permalink":"https://blog.stolenzc.com/2020/vim/","summary":"💡VIM从入门到精通 1. 汇总操作 退出VIM 通过命令行模式退出 命令 说明 命令 说明 :q 退出 :q! 强制退出，不保存 :wq 保存并退出 :wq! 强制保存并退出 :w \u0026lt;文件","title":"VIM"},{"content":"快捷键 按键 行为 按键 行为 command + shift + 3 系统截屏，并保存到桌面 command + control + a 微信截屏（需要设置） command + fn + F3 显示桌面 command + tab 快速切换应用 command + tab + alt + enter 打开最小化的应用 command + M 最小化应用 command + left 回到开始，Home command + right 到最后，End option + left 到上一个单词开头 option + right 到下一个单词结尾 control + left 到上一个桌面 control + right 到下一个桌面 fn + left 跳到文章开头 fn + right 跳到文章结尾 fn + up 到上一页 fn + down 到下一页 command + s 保存文件 command + c 复制 command + v 粘贴 command + x 剪切 command + space 聚焦搜索，全局搜索软件或文件 control + command + Q 快捷锁屏，和QQ快捷键冲突 control + a 转到行首（命令行下） control + e 转到行尾（命令行下） command + Q 关闭活动程序 command + W 关闭活动窗口 触控板 动作 行为 动作 行为 双指左右滑动 切换页面 双指从右边缘向左滑动 唤出通知中心 三只下划 聚焦当前应用 三指上划 平铺打开的应用 四指内合 调出启动台 四指张开 显示桌面（在非全屏状态下） 三指左右滑动 切换页面 Brew命令 命令 功能 brew ls 查看本地安装的软件 brew search 搜索软件 brew -v 查看brew的版本 brew update 升级brew brew install 软件名 安装软件 brew remove 软件名 卸载软件 brew 彻底卸载软件方法\nbrew tap beeftornado/rmtree - 安装rmtree brew rmtree 软件名 - 删除软件 brew cleanup - 清理缓存\n必备软件 scroll reverser 解决鼠标滑动方向是反着的问题，下载地址：scroll reverser官网\nTrojan X Mac 下科学上网软件，好用方便，下载地址：JimLee1996的github\nsequel pro Mac 下免费的MySQL数据库图形化软件，下载地址：sequel pro 官网\n软件技巧 添加快捷键输出当前时间 自动操作 -\u0026gt; 新建文稿 -\u0026gt; 快速操作 -\u0026gt; 实用工具 -\u0026gt; 允许shell脚本 -\u0026gt; 选择（没有输入、位于任何应用程序、用输出内容替换所选文本） 脚本内容填写 date \u0026quot;+%Y-%m-%d %H:%M:%S\u0026quot; 保存 -\u0026gt; 设置快捷键 最小化软件和恢复最小化软件 command m - 最小化当前窗口\ncommand option m - 最小化当前软件所有窗口\ncommand Tab 选中软件后松开 Tab 按键，再按 option 按键，松开 command 按键即可恢复最小化软件\ncommand Tab 选中软件后松开 Tab 按键，再按 option 按键后再按 enter 按键即可恢复最小化软件\n使用问题 鼠标滚轮方向反着 将系统偏好设置\u0026gt;鼠标\u0026gt;滚动方向前面的勾去掉即可，该操作会影响触控板的划动方向，替代方式可以使用scroll reverser软件\nFinder进入根目录 进入访达\u0026gt;偏好设置\u0026gt;边栏中，将硬盘前面选择为勾即可\n安装HomeBrew 本命令中使用到的镜像源全部为国内的镜像源\n命令行输入：\n1 /bin/zsh -c \u0026#34;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\u0026#34; 参考文档：mac安装homebrew失败怎么办？\n关闭浏览器快速前进和后退 Edge：\n1 defaults write com.microsoft.edgemac AppleEnableSwipeNavigateWithScrolls -bool false Chrome\n1 defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool false 安装mysqlclient遇到lssl等错误 env LDFLAGS=\u0026quot;-I/usr/local/opt/openssl/include -L/usr/local/opt/openssl/lib\u0026quot; pip --no-cache install mysqlclient==1.4.6 -i https://mirrors.aliyun.com/pypi/simple\n参考自：Macos安装报错 ld: library not found for -lssl\nmac下网络冲突的问题 在配置文件中添加:\n1 2 3 4 5 6 \u0026#34;default-address-pools\u0026#34;: [ { \u0026#34;base\u0026#34;: \u0026#34;172.31.0.0/16\u0026#34;, \u0026#34;size\u0026#34;: 24 } ], 禁止.DS_Store文件生成 禁止生成\n1 defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE 恢复生成\n1 defaults delete com.apple.desktopservices DSDontWriteNetworkStores 隐藏和显示以点开头的文件 隐藏\n1 2 defaults write com.apple.Finder AppleShowAllFiles YES killall Finder 显示\n1 2 defaults write com.apple.Finder AppleShowAllFiles NO killall Finder xcode命令报错 现象：报错gyp: No Xcode or CLT version detected!\n解决：\n1 2 sudo rm -rf $(xcode-select -print-path) xcode-select --install 在执行xcode-select --install时，可能会报错：不能安装该软件，因为当前无法从软件更新服务器获得。\n解决：在apple develop搜索 command line tools下载安装即可\nmac不支持小于4位的密码 pwpolicy -clearaccountpolicies - 关闭密码安全检查\npasswd - 命令行修改密码\nterminal命令 traceroute 192.168.1.1 - 查看网络请求的具体访问过的地址\nlsof -i tcp:3306 - 查看端口占用\nopen -n /Applications/WeChat.app/Contents/MacOS/WeChat - 实现双开微信\nbrew cask install qlcolorcode - quicklook支持预览代码\nbrew cask install qlmarkdown - quicklook支持预览markdown\n","permalink":"https://blog.stolenzc.com/2020/mac/","summary":"快捷键 按键 行为 按键 行为 command + shift + 3 系统截屏，并保存到桌面 command + control + a 微信截屏（需要设置） command + fn + F3 显示桌面 command + tab 快速切换应用 command + tab + alt + enter 打开最","title":"MacOS使用"},{"content":"基础配置 settings.json（首选项，打开设置）的配置：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { \u0026#34;editor.fontSize\u0026#34;: 18, \u0026#34;editor.wordWrap\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;editor.rulers\u0026#34;: [ 100 ], \u0026#34;editor.renderControlCharacters\u0026#34;: true, \u0026#34;editor.renderWhitespace\u0026#34;: \u0026#34;all\u0026#34;, \u0026#34;terminal.integrated.cursorBlinking\u0026#34;: true, \u0026#34;terminal.integrated.cursorStyle\u0026#34;: \u0026#34;line\u0026#34;, \u0026#34;terminal.integrated.fontSize\u0026#34;: 20, \u0026#34;workbench.tree.indent\u0026#34;: 16, \u0026#34;emmet.extensionsPath\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;python.linting.flake8Enabled\u0026#34;: true, \u0026#34;python.formatting.provider\u0026#34;: \u0026#34;yapf\u0026#34;, \u0026#34;python.linting.flake8Args\u0026#34;: [ \u0026#34;--max-line-length=256\u0026#34;, \u0026#34;--extend-ignore=F821\u0026#34; ], \u0026#34;python.linting.pylintEnabled\u0026#34;: false, \u0026#34;editor.minimap.enabled\u0026#34;: false } editor.wordWrpa - 代码自动换行 editor.rulers - 设置一个代码单行最长提示线 editor.renderControlCharacters - 是否显示控制字符(如tab) editor.renderWhitespace - 什么情况下显示空格(可设置为all) terminal.integrated.cursorBlinking - 集成终端光标是否闪烁 terminal.integrated.cursorStyle - 集成终端光标样式 terminal.integrated.fontSize - 集成终端字体大小 python.linting.flake8Enabled - 设置flake8工具是否开启 python.formatting.provider - 设置python的格式化工具 python.linting.flake8Args - 设置flake8的检查规则 --max-line-length - 设置单行的最长长度 --extend-ignore - 设置排除的检查 python.linting.pylintEnable - 设置pylint是否开启 editor.occurrencesHighlight - 设置光标所在单词是否高亮 workbench.editor.enablePreview - 是否允许查找文件后保持预览 Editor.Links - 控制编辑器中是否检测链接并使其可被点击 ~/.ssh/config的配置\n1 2 3 4 Host 192.168.0.153 HostName 192.168.0.153 User root ForwardAgent yes 分别指定远程连接的地址和用户名\n快捷键使用 在Mac下ctrl均使用command替代\n软件操作 ctrl + shift + p /f1 - 打开命令面板 ctrl + p - 文件搜索框 ? - 列出当前可执行的动作 !/Ctrl+Shift+M - 显示Errors或Warnings :/Ctrl+G - 跳转到行数 @/Ctrl+Shift+O - 跳转到symbol，查找属性或函数 #/Ctrl+T - 根据名字查找symbol 窗口管理 Ctrl+N/W - 新建/关闭tab页 Ctrl+Shift+N/W - 打开/关闭一个新的VSCode编辑器 Ctrl+Tab - 切换窗口 Ctrl+\\ - 向右拆分屏幕，最多三个 Ctrl+1/2/3 - 切换拆分后的编辑器窗口 Ctrl + O - 打开文件 代码格式 Ctrl+[/] - 代码行向左或者向右缩进 Ctrl+C/X - 复制/剪切当前行/选中内容 Shift+Alt+F - 代码格式化 Alt+Up/Down - 将当前代码向上或向下移动一行 Shift+Alt+Up/Down - 将代码向上/向下复制一行 Ctrl+Enter - 在当前行下方插入一行 Ctrl+Shift+Enter - 在当前行上方插入一行 Ctrl + D - 选中光标所在词组 左侧工具栏 ctrl + b - 展开/收起侧边栏 ctrl + shift + f - 搜索 ctrl + shift + e - 资源管理器 ⬆️/ ⬇️ - 移动光标 ⬅️ - 收起文件夹 ➡️ - 展开文件夹 空格 - 打开文件 ctrl + shift + g - 源代码管理 ctrl + shift + x - 插件管理 插件及功能 Chinese Language: VSCode中文插件，国产程序员开发必备插件 TabNine: 智能输入插件，根据输入历史和场景，自动预测输入内容 Git History: 查看git历史记录的插件，安装后打开文件在标签页右键，会看到最下面多了一个Git: View File History；提供了查看提交记录，文件历史，比较分支和不同提交之间的区别 GitLens-Git supercharged: 该插件增强了VSCode自带的git功能，可以方便在每一行最后看到该行最近的改动记录。 Markdown All in One: VSCode下编辑Markdown较为全能的插件，提供了键盘快捷方式、TOC目录、自动预览等功能 Markdown Preview: 该插件是一个提供Github风格的Markdown预览插件 open in browser: 该插件是一个允许用户用浏览器或应用程序打开当前的文件，方便HTML开发预览 OpenAPI (Swagger) Editor: 该插件在VSCode中提供了对JSON或YAML格式的OpenAPI规范（OAS）（以前称为Swagger规范）的支持。 、包括，例如文档lint，代码导航，定义链接，静态安全分析等！ openapi-lint: 该插件为OpenAPI文件提供了更为强大的lint功能，包括对$ref引用的lint Pylance: 该插件提供了VSCode上开发Python文件的服务支持，前身为Pyright，提供了包括python代码lint，自动跳转，自动导入等Pycharm才拥有的功能。该插件通常每周四更新 Python: Python开发的基础插件，提供运行、调试、检测代码等功能 Remote - SSH: VSCode上远程开发的必备插件，使您可以将带有SSH服务器的任何远程计算机用作开发环境。 Remote - SSH: Editing Configuration Files: 编辑SSH配置文件时，此扩展补充了Remote-SSH扩展的语法颜色，关键字intellisense和简单摘要。 YAML: 该插件提供对YAML语法支持以及内置的Kubernetes语法支持 Comment Translate: vscode中的翻译插件，可以翻译注释，驼峰变量等单词，英语不好的开发者必备插件 常见的问题 关闭预览功能 setting中搜索workbench.editor.enablePreview，将前面的勾去掉即可\ngo包跳转到外部网站 settings中搜索Editor.Links，将前面的勾去掉即可\n光标所在词组高亮 settings中搜索editor.occurrencesHighlight，去掉勾即可\n","permalink":"https://blog.stolenzc.com/2020/vscode/","summary":"基础配置 settings.json（首选项，打开设置）的配置： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { \u0026#34;editor.fontSize\u0026#34;: 18, \u0026#34;editor.wordWrap\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;editor.rulers\u0026#34;: [ 100 ], \u0026#34;editor.renderControlCharacters\u0026#34;: true, \u0026#34;editor.renderWhitespace\u0026#34;: \u0026#34;all\u0026#34;, \u0026#34;terminal.integrated.cursorBlinking\u0026#34;: true, \u0026#34;terminal.integrated.cursorStyle\u0026#34;: \u0026#34;line\u0026#34;,","title":"VSCode的使用"},{"content":"快速搞懂DRF并方便的使用\n名词释义 序列化：模型转换为json，即对象-字典-json\n反序列化：json转换为模型，即json-字典-对象\n字段参数 默认使用模型中的字段约束进行校验，自定义字段约束参考Serializer fields\n常用的约束包括：\n通用参数\n参数 含义 read_only = True 当前字段只能进行序列化输出（用于不需要反序列化输入的字段） write_only = True 当前字段只能进行反序列化输入，不进行序列化输出 required = True 在反序列化时是必填字段，默认为True allow_null = False 当前字段是否允许传None，默认是False（必填字段False，反之则True） allow_blank = False 当前字段是否运行为空，默认是False（必填字段False，反之则True） default = xx 指定在反序列化时，当前字段没值时所使用的默认值 validators=校验器 当前字段所使用的校验器（下面介绍常用的） error_messages 包含错误key-value的字段（下面会举例） label 当前字段在前端的api页面中所显示的字段名称 选项参数\n参数 含义 max_length 字段最大长度 min_length 字段最小长度 trim_whitespace 是否截断空字符串 max_value 字段最大值 min_value 字段最小值 字段校验(反序列化) 对单个字段校验使用的是validate_\u0026lt;filed_name\u0026gt;，如：\n1 2 3 4 def validate_name(self, value): if User.objects.filter(name=value): raise serializers.ValidationError(detail=\u0026#39;用户名已存在\u0026#39;) return value 对所有字段校验使用的是validate，如：\n1 2 3 4 5 def validate(self,attr): if attr[\u0026#39;name\u0026#39;] or attr[\u0026#39;email\u0026#39;]: return attr else: raise serializers.ValidationError(detail=\u0026#39;用户名或邮箱至少填一个\u0026#39;) 校验顺序：\n参数限定校验，（失败则不会向下校验） 单字段校验（无论成功或失败都会继续校验） 多字段校验 校验数据的使用：\n1 2 3 4 5 6 7 8 # 指定需要校验的数据 serializer = self.serializer_class(data=request.data) # 进行字段校验，如果失败则会报错 serializer.is_valid(raise_exception=True) # 获取校验未通过的提示 serializer.errors # 获取校验通过的数据 serializer.validated_date 序列化 指定序列化字段：\n1 2 3 4 5 6 class Meta: model = User # 指定字段使用元组，所有字段使用\u0026#34;__all__\u0026#34; fields = (\u0026#39;name\u0026#39;, \u0026#39;age\u0026#39;,) # 指定只能序列化，无法反序列化的字段 read_only_fields = (\u0026#39;created_at\u0026#39;, \u0026#39;updated_at\u0026#39;) 指定单个字段进行自定义序列化：\n1 2 3 4 5 password = serializers.SerializerMethodField() def get_password(self, instance): # instance为当前的实例，即view中的get_object() return \u0026#34;******\u0026#34; 对所有字段进行自定义序列化：\n1 2 def to_representation(self, instance): return dict() view使用序列化：\n1 2 3 4 # 对data进行序列化，data为queryset或者object，如果是queryset，需要加上many=True serializer = self.serializer_class(data, many=True) # 返回一个OrderedDict，转换为列表即可得到指定的值 result_dict = serializer.data 数据库写入操作 serializer提供了create和update的功能，分别对应post请求和put/patch请求。如：\n1 2 3 4 5 6 7 8 9 10 def update(self, instance, validated_data): instance.update(**validated_data) instance.updated_at = timezone.now() instance.save() return instance def create(self, validated_data): instance = User(**validated_data) instance.save() return instance 参考内容 Django_rest framework_序列化器和自定义校验\n","permalink":"https://blog.stolenzc.com/2020/drf_serializer/","summary":"快速搞懂DRF并方便的使用 名词释义 序列化：模型转换为json，即对象-字典-json 反序列化：json转换为模型，即json-字典-对象 字段","title":"DRF的Serializer"},{"content":"使用Swagger编写接口文档语法示例\n官方openapi3.0规范访问：About Swagger Specification\n1 2 3 4 5 swagger: \u0026#34;2.0\u0026#34; info: description: \u0026#34;this is a api for authenticating users and binding cloud accounts.\u0026#34; version: \u0026#34;1.0.0\u0026#34; title: \u0026#34;Auth api\u0026#34; swagger: “2.0” 指定swagger的版本号，此处必须为2.0\ninfo: 描述api文档的元数据\ntitle：接口标题\ndescription：接口文档描述\nversion：接口版本号\n1 2 3 4 5 6 7 host: \u0026#34;52.82.26.240:5000\u0026#34; basePaths: /api schemes: - http - https produces: - application/json host： swagger提供测试用例的主机名，如果未设定就为当前主机，可以设置端口\nbasePath：定义的api的前缀，必须已/开头,测试用例的主机则为:host＋bashPath\nschemes：指定调用接口的协议，必须是:\u0026ldquo;http\u0026rdquo;, \u0026ldquo;https\u0026rdquo;, \u0026ldquo;ws\u0026rdquo;, \u0026ldquo;wss\u0026rdquo;．默认是http.-表示是个数组元素，即schemes接受一个数组参数\nproduces：声明全局后端响应返回xml数据格式，通常使用\u0026quot;application/json\u0026quot;或者\u0026quot;application/xml\u0026quot;，可以在局部中定义覆盖全局\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 paths: /authenticate: post: tags: - \u0026#34;auth\u0026#34; summary: \u0026#34;Get a accessToken\u0026#34; consumes: - \u0026#34;application/json\u0026#34; produces: - \u0026#34;application/json\u0026#34; parameters: - name: \u0026#34;body\u0026#34; description: \u0026#34;account of fastone\u0026#34; required: true in: \u0026#34;body\u0026#34; schema: $ref: \u0026#34;#/definitions/Auth\u0026#34; responses: 400: description: \u0026#34;Invalid input\u0026#34; 403: description: \u0026#34;Invalid credential\u0026#34; 200: description: \u0026#34;Get a accessToken\u0026#34; default: paths: 路由地址\npost: 请求方法，需要是http定义的请求方法（get、post、put、patch、delete、head、option）\ntags: 命名空间，也可以称为标签，方便对接口进行归类，快速过滤出相关接口\nsummary: 接口概要\ndescription：接口描述\nconsumes：前端请求格式，即body的参数格式，通常为\u0026quot;application/json\u0026quot;、\u0026ldquo;application/xml\u0026rdquo;、\u0026ldquo;application/text\u0026rdquo;\nproduces：后端响应格式，通常为\u0026quot;application/json\u0026quot;、\u0026ldquo;application/xml\u0026rdquo;、\u0026ldquo;application/text\u0026rdquo;\nparameters：参数\nname： 参数名字\ndescription：描述\nrequired：是否是必填参数\nin：属于哪种参数 body, header, formData, query, path，cookie\nbody只能有一个，body里的参数需要以model的形式通过schema放在里面\nenum：枚举参数值，表示可能出现的参数\nschema：描述传递值\n$ref: “#/definitions/Auth”\n$ref: 把model 在definitions里的Auth当作参数放入body中。\nresponses： 状态码\nmodel Auth的写法，会放到yaml的最后，内容如下\n1 2 3 4 5 6 7 8 definitions: Auth: type: \u0026#34;string\u0026#34; properties: usernameOrEmail: type: \u0026#34;string\u0026#34; password: type: \u0026#34;string\u0026#34; 示例代码，转载于Swagger编写API文档的YAML中文示例：\n必要字段！Swagger规范版本，必须填2.0，否则该YAML将不能用于Swagger其他组件 swagger: \u0026#39;2.0\u0026#39; #必要字段！描述API接口信息的元数据 info: #接口标题 title: swagger说明文档　#接口文档的描述 description: 学习Swagger #版本号 version: 1.0.0 #Swagger会提供测试用例，host指定测试时的主机名，如果没有指定就是当前主机,可以指定端口． host: 127.0.0.1 #定义的api的前缀，必须已/开头,测试用例的主机则为:host＋bashPath basePath: /api #指定调用接口的协议，必须是:\u0026#34;http\u0026#34;, \u0026#34;https\u0026#34;, \u0026#34;ws\u0026#34;, \u0026#34;wss\u0026#34;．默认是http.-表示是个数组元素，即schemes接受一个数组参数 schemes: - http - https #对应与http协议头request的Accept，调用者可接受类型,默认是*/*,定义的类型必须是http协议定义的 Mime Types,RestfulAPI一般定义成application/json #这两个是对所有接口的全局设置，在细化的接口中是还可以对应这两个属性来覆盖全局属性 produces: - application/json #必要字段!定义可有可操作的API paths: /users: #必要字段!定义HTTP操作方法，必须是http协议定义的方法 get: #接口概要 summary: 查询所有用户信息 #接口描述 description: 查询出所有用户的所有信息，用户名，别名 #标签，方便快速过滤出User相关的接口 tags: - User #返回值描述，必要自动 responses: #返回的http状态码 200: description: 所有用户信息或者用户的集合信息 #描述返回值 schema: #返回值格式，可选的有array,integer,string,boolean type: array #针对array,每个条目的格式,type定义为array．必要填写items items: #引用在definitions下定义的Users $ref: \u0026#39;#/definitions/User\u0026#39; #执行出错的处理 default: description: 操作异常,执行失败.返回信息描述错误详情 schema: #值类型 type: object #定义属性 properties: #属性名 message: #类型 type: string #即对于同一个url定义两个不同的方法，表示两个接口 post: description: 注册一个用户 #请求参数 parameters: #参数key - name: username #传递方法，formData表示表单传输，还有query表示url拼接传输，path表示作为url的一部分 #body表示http头承载参数(body只能有一个,有body不能在有其他的) in: formData #参数描述 description: 用户名，不能使用已经被注册过的 #参数是否必要，默认false required: true #参数类型，可选的包括array,integer,boolean,string.使用array必须使用items type: string - name: password in: formData description: 用户登陆密码，加密传输，加密存储 required: true type: string - name: alias in: formData type: string description: 用户别名 #非必要字段 required: false responses: #返回的http状态码 200: description: 通过返回值来标示执行结果　返回true表示执行成功 schema: #值类型 type: object #定义属性 properties: #属性名 status: #类型 type: boolean #描述 description: 是否成功 #执行出错的处理 default: description: 操作异常,执行失败.返回信息描述错误详情 schema: #值类型 type: object #定义属性 properties: #属性名 message: #类型 type: string /users/{id}: #{id}表示id为请求参数，例如/users/1,/users/2都是对该API的请求，此时id即为１和2 get: summary: 根据用户名id查询该用户的所有信息 description: 查询出某个用户的所有信息，用户名，别名等 tags: - User parameters: #上面接口中定义了{id}，则参数列表中必须包含参数id,并且请求类型为path - name: id in: path description: 要查询的用户的用户名,它是唯一标识 required: true type: string responses: 200: description: 所有用户信息或者用户的集合信息 schema: $ref: \u0026#39;#/definitions/User\u0026#39; default: description: 操作异常,执行失败.返回信息描述错误详情 schema: #值类型 type: object #定义属性 properties: #属性名 message: #类型 type: string #http定义的delete方法,删除一个资源 delete: summary: 删除用户 description: 删除某个用户的信息，被删除的用户将无法登陆 parameters: - name: id in: path type: string required: true description: 用户的唯一标示符 tags: - User responses: 200: description: 通过返回值来标示执行结果　返回true表示执行成功 schema: #值类型 type: object #定义属性 properties: #属性名 status: #类型 type: boolean #描述 description: 是否成功 default: description: 操作异常,执行失败.返回信息描述错误详情 schema: #值类型 type: object #定义属性 properties: #属性名 message: #类型 type: string #描述错误信息 #http定义的patch方法，表示修改一个资源 patch: summary: 用户信息修改 description: 修改用户信息(用户名别名) parameters: - name: id in: path description: 用户名,要修改的数据的唯一标识符 required: true type: string - name: alias in: formData description: 新的用户别名 required: true type: string tags: - User responses: 200: description: 通过返回值来标示执行结果　返回true表示执行成功 schema: #值类型 type: object #定义属性 properties: #属性名 status: #类型 type: boolean #描述 description: 是否成功 default: description: 操作异常,执行失败.返回信息描述错误详情 schema: #值类型 type: object #定义属性 properties: #属性名 message: #类型 type: string #描述错误信息 definitions: User: #值类型 type: object #定义属性 properties: #属性名 id: #类型 type: string #描述 description: 用户的唯一id username: type: string description: 用户名 alias: type: string description: 别名 参考文档：用swagger生成api的接口文档（yaml版）\n查看效果：swagger.io\n","permalink":"https://blog.stolenzc.com/2020/swagger/","summary":"使用Swagger编写接口文档语法示例 官方openapi3.0规范访问：About Swagger Specification 1 2 3 4 5 swagger: \u0026#34;2.0\u0026#34; info: description: \u0026#34;this is a api for authenticating users and binding cloud accounts.\u0026#34; version: \u0026#34;1.0.0\u0026#34; title: \u0026#34;Auth api\u0026#34; swagger: “","title":"Swagger编写API文档的YMAL文件语法"},{"content":"详细介绍一些Git的工作流程步骤和相关的命令\n流程 GitHub flow算是一种相对简单的Git工作流程，主要步骤为下：\n其中上游分仓库称为upstream，远端仓库称为origin。\n首先从upstream仓库fork代码到远端仓库，然后将远端仓库克隆到本地。 给本地仓库添加一个upstream仓库，方便同步最新代码 从本地的master（或者develop，根据公司要求）创建一个功能开发分支切换到功能开发分支上进行功能的开发。 开发完成后，将代码提交并推送到origin 在origin上发起一个pull request请求，代码将会发送给审查者review。 Git flow是一个更规范实用的Git工作流。\n从远端仓库克隆工作分支到本地，然后本地切换到自己的开发分支上 进行功能开发，开发完成后合并到主开发分支 如果升级就从开发分支先合并到release分支，release再合并到线上分支 如果遇到紧急bug修复，创建hotfix分支，修复后分别合并到线上和开发分支 相关命令 git clone 仓库地址 - 克隆远端仓库到本地，通常情况下只会克隆master \u0026ndash;depth=1 - 只克隆最新提交内容，不克隆历史记录 git remote add upstream git@github.com:fe/github-flow.git - 添加upstream仓库 git checkout -b 开发分支名 基于的分支名 - 创建并切换到开发分支，默认基于master分支 git checkout -b product origin/product - 基于远端分支创建新的分支 git rebase -i 合并多个提交的前一个提交编码 - 将多个提交合并为一个提交 p/pick - 为保留该提交 s/squash - 保留提交记录，并将提交合并到之前的提交上 d/drop - 删除该提交记录 git pull upstream master --rebase - 长时间未同步时同步上游代码保持本地与上游代码一致 升级流程 Github flow升级\n本地打tag，然后推送到upstream的master\ngit tag 标签内容 - 打标签 git push upstream 标签内容 - 将标签推送到远端 upstream的master提一个pr到upstream的product\nGit flow升级\ndevelop提pr到master分支\n本地pull master的分支\n本地打tag，推送到远端触发升级\ngit tag 标签内容 - 本地打标签 git push upstream 标签名 - 推送到远端分支 常见问题 在命令行显示git分支 1 2 git_branch() { git branch 2\u0026gt; /dev/null | sed -e \u0026#39;/^[^]/d\u0026#39; -e \u0026#39;s/ (.*)/(\\1)/\u0026#39; } export PS1=\u0026#34;\\u@[\\033[32m]\\w[\\033[33m]\\$(git_branch)[\\033[00m]\\$ \u0026#34; 如果希望立即生效，在命令行执行一下代码即可\n1 source $HOME/.bashrc git中文文件名显示问题 1 git config --global core.quotepath false 遇到conflict处理 当使用git pull upstream master --rebase的时候，可能会遇到conflict的问题。处理办法：\n遇到conflict时，分支会自动切换到临时分支上，并且在冲突地方给出提示。 手动进行冲突处理 使用git add .将重新处理的添加到暂存区 使用git rebase --continue恢复到之前到分支上，完成处理 其他git命令 git branch -m oldName newName - 分支重命名 git branch -d/-D 分支名 - 删除分支 git branch -a - 查看所有本地分支和远端分支 git remote -v - 查看所有远端仓库地址 git push origin --delete 分支名 - 删除远端分支 git config --list - 查看本机git用户信息 git config user.name git config user.email git commit --amend --reset-author - 修改commit提交作者 git commit --date=\u0026quot;周 月 日 时间 年 +0800\u0026quot; -am \u0026quot;提交\u0026quot; - 指定commit时间和内容 git commit --amend --date=\u0026quot;Thu Aug 9 23:04:57 2018 -0700\u0026quot; - 修改commit时间 git show - 查看最近一次提交的变更 git show -5 - 查看最近五次提交的变更 git show commit_id - 查看指定提交的变更 git remote update origin --prune - Git刷新分支 ","permalink":"https://blog.stolenzc.com/2020/github_flow/","summary":"详细介绍一些Git的工作流程步骤和相关的命令 流程 GitHub flow算是一种相对简单的Git工作流程，主要步骤为下： 其中上游分仓库称为upstream","title":"GitHub 开发流程"},{"content":"收集一些使用Python会遇到的问题，该文章持续更新\nmysqlclient安装失败 Ubuntu下安装mysqlclient需要依次安装以下包\n1 2 3 4 5 6 7 8 9 10 11 sudo apt install libmysqlclient-dev sudo apt install libssl-dev sudo apt install libcrypto++-dev sudo pip3 install mysqlclient # 报错error: invalid command \u0026#39;bdist_wheel pip3 install wheel # 如果还报错就执行下面的包安装 sudo apt-get install python3 python-dev python3-dev sudo apt-get install build-essential libssl-dev libffi-dev sudo apt-get install libxml2-dev libxslt1-dev zlib1g-dev 安装flask-mongoengine报错 需要安装一下依赖包\n1 2 3 pip3 install rednose pip3 install nose pip3 install coverage ","permalink":"https://blog.stolenzc.com/2020/python_issue/","summary":"收集一些使用Python会遇到的问题，该文章持续更新 mysqlclient安装失败 Ubuntu下安装mysqlclient需要依次安装以下包","title":"Python下遇到的一些故障"},{"content":"安装 Ubuntu安装\nsudo apt update - 更新软件包 sudo apt -y install apt-transport-https ca-certificates curl software-properties-common - 安装可能用到的依赖 curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add - - 添加阿里云源的密钥 sudo add-apt-repository \u0026quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\u0026quot; - 添加阿里云源信息 sudo apt update - 更新索引库 sudo apt-get remove docker docker-engine docker.io - 如果存在docker需要先删除 sudo apt install docker-ce - 安装docker Centos安装\nuname -r - 查看内核版本(centos7 64位要求3.10+，centos6 64位要求2.6+) yum update - 更新底层库文件 yum erase -y docker docker-common docker-engine - 移除可能存在的旧版docker yum install -y yum-utils device-mapper-persistent-data lvm2 - 安装工具包和依赖项 yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo - 添加docker-ce源 yum makecache fast - 做本地缓存，加快安装速度 yum -y install docker-ce - yum安装docker systemctl start docker - 启动docker systemctl enable docker - 设置开机自启动 配置 配置主要就是更换docker源\nLinux下更改国内镜像在/etc/docker/daemon.json中添加以下代码\n1 2 3 4 5 6 { \u0026#34;registry-mirrors\u0026#34;: [ \u0026#34;http://hub-mirror.c.163.com\u0026#34;, \u0026#34;https://registry.docker-cn.com\u0026#34; ] } daocloud也可以下载镜像，且有较详细的配置参数\n配置私服拉取镜像\n1 2 3 4 5 6 7 # /etc/docker/daemon.json { \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;https://registry.docker-cn.com\u0026#34;], \u0026#34;insecure-registries\u0026#34;: [\u0026#34;ip:port\u0026#34;] } # systemctl daemon-reload # systemctl restart docker 也可以访问阿里云镜像服务，注册后获取镜像加速地址\n命令 普通命令 docker version - 查看docker版本 docker info - 查看详细信息 docker network create isolated - 创建docker网络 镜像管理 docker pull 镜像名 - 下载镜像 docker images - 查看所有本地的镜像 docker search 镜像名 - 查找镜像 docker rmi 镜像id/镜像名 - 删除镜像 docker save -o 导出的路径 镜像id - 导出镜像到文件 docker load -i 镜像文件 - 加载本地到镜像文件 docker tag 镜像id 镜像名:镜像版本 - 重命名镜像 docker tag 旧镜像名:旧版本 新镜像名:新版本 - 复制一个镜像 docker push 地址名/仓库名/镜像名:版本名 - 推送镜像 容器管理 docker run -d -p 80:80 --name mynginx --rm nginx:latest [command] - 创建并运行容器，\n-d - 后台运行 -i - 启动一个可交互的容器，并持续打开标准输入 -t - 终端关联到容器的标准输入输出上 -p port1:port2 - 指定端口 外部端口:内部端口 -v/--volume 外部文件夹:内部文件夹 - 数据卷操作，将外部文件夹映射到容器内部文件夹 --link 容器名:自定义网络别名 - 给容器网络设置别名 --name 容器名字 - 给创建的容器命名 -e 环境变量名=环境变量值 - 设置容器全局变量 --rm - 为停止容器的时候容器自动删除 镜像名:版本号 - 指定镜像和版本，latest为最新版本，默认不写也为最新版本 command - 表示运行容器时的启动命令 docker ps [-qa] - 查看正在运行到容器\n-q - 只查看容器到标识 -a - 查看全部到容器，包括未运行到容器 docker logs -f 容器id - 查看容器到日志\n-f - 可以滚动到查看日志到最后几行 docker exec -it 容器ID/容器名 bash - 进入到容器内部命令行\ndocker stop 容器名称/容器id - 停止正在运行的容器\ndocker stop $(docker ps -qa) - 停止所有的容器\ndocker rm -f 容器id - 删除容器\n-f - 强制删除容器（包括正在运行的容器） docker start 容器名称 - 运行已经创建的容器\ndocker restart 容器名称 - 重启正在运行的容器\ndocker cp 文件名 容器id:容器内部路径 - 拷贝文件到容器中\ndocker container ls -a - 查看所有的容器，不加-a表示正在运行的容器\ndocker container prune - 清空所有容器\ndocker inspect 容器id - 获取容器底层信息\nIPAddress - ip地址 数据卷 docker volume create 数据卷名称 - 创建数据卷\n创建数据卷之后，默认会存放在/var/lib/docker/volumes/数据卷名称/_data docker volume inspect 数据卷名称 - 查看数据卷详细信息\ndocker volumes ls - 查看全部数据卷\ndocker volumes rm 数据卷名称 - 删除数据卷\ndocker run -v 数据卷名称:容器内部路径 镜像id - 映射数据卷，会自动复制容器的文件到宿主机文件夹\ndocker run -v 宿主机路径:容器内部路径 镜像id - 直接指定一个路径作为数据卷的存放地址，这个地址是空的\n自定义docker镜像 创建一个Dockerfile文件，并指定自定义镜像\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #: 注释，指令大小写不敏感，但是建议指令大写，内容小写 FROM: 指定当前自定义镜像依赖的环境，dockerfile第一条非注释的命令必须是from COPY: 将相对路径下的内容复制到镜像中 ADD: 将文件写入到镜像中（和copy的区别是copy是运行镜像时拷贝文件，add是构建镜像时拷贝进入） WORKDIR: 生命镜像到默认目录 USER: 镜像中的启动用户名 RUN: 构建镜像时执行命令 ENV: 指定镜像中的环境变量 CMD: 需要执行的命令（在workdir下执行，可以写多个，以最后一个为准） ENTRYPOINT: 如果dockerfile中没有run命令，则运行镜像中 /entrypoint.sh 文件，注意需要给执行权限 ARG: 用于指定传递给构建运行时的变量 EXPOSE: 指定于外界交互的端口 LABEL: 用于为镜像添加元数据 maintainer: 维护者信息 version: 版本信息 制作镜像docker build -t 镜像名称:[tag] .\n-t - 指定版本 . - 表示将当前目录下的文件编译为镜像 docker commit和docker build的区别\ndocker commit 容器id 自定义镜像名字 - 将容器打包成镜像 docker build -t 镜像名称:[tag] . - 通过dockerfile创建镜像\nDocker-compoes 下载docker-compose文件，直接从github下载对应文件，修改文件的可执行权限并配置环境变量即可使用 编写docker-compose.yml文件 1 2 3 4 5 6 7 8 9 10 11 12 13 version: \u0026#39;3\u0026#39; # 指定版本号，该配置为固定配置，根据不同的docker-compose决定 services: mysql: # 服务的名称 restart: always # 表示只要docker启动了，容器就一起启动 image: mysql:5.7 # 指定镜像 continer_name: mysql # 指定容器的名称 ports: - 3306:3306 # 指定端口号映射 envirement: # 指定环境变量 MYSQL_ROOT_PASSWORD: root TZ: Asia/Shanghai volumes: - ~/volumes/mysql/data:/var/lib/mysql # 指定数据卷 推送镜像到阿里云 首先在阿里云创建命名空间，相当于仓库名 docker login --username=王大锤 registry.cn-hangzhou.aliyuncs.com 本地登录阿里云 docker tag 旧镜像名:旧版本 新镜像名:新版本 修改镜像名称 注意：新镜像名需要按照：阿里云地址/阿里云创建到命名空间/自定义名称或者阿里云创建的仓库名:版本的格式 docker push 新镜像名:版本号推送到阿里云镜像仓库 docker pull 新镜像名:版本号将远端到镜像拉到本地 常见容器创建命令 docker run -d -p 6379:6379 --name redis-master redis:latest redis-server --requirepass 1qaz2wsx - 创建一个redis容器并设置密码为1qaz2wsx\ndocker run -d -p 6380:6379 --link redis-master:redis-master --name redis-slave-1 redis:latest redis-server --slaveof redis-master 6379 --masterauth 1qaz2wsx - 创建一个redis从机容器，并关联名称为redis-server的主机\ndocker run -d -p 3306:3306 -v /root/docker/mysql/conf:/etc/mysql/mysql.conf.d -v /root/docker/mysql/data:/var/lib/mysql --name mysql57 -e \u0026quot;MYSQL_ROOT_PASSWORD=123456\u0026quot; mysql:5.7.29 - 创建一个MySQL的容器设置数据库密码为123456并将做数据备份\n常见故障 docker启动后命令无法使用 报错：Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.40/containers/json: dial unix /var/run/docker.sock: connect: permission denied\n原因：docker进程使用Unix Socket而不是TCP端口。而默认情况下，Unix socket属于root用户，需要root权限才能访问。\n解决办法：\n获取root权限使用docker docker守护进程启动的时候，会默认赋予名字为docker的用户组读写Unix socket的权限，因此只要创建docker用户组，并将当前用户加入到docker用户组中，那么当前用户就有权限访问Unix socket了，进而也就可以执行docker相关命令 1 2 3 4 sudo groupadd docker #添加docker用户组 sudo gpasswd -a $USER docker #将登陆用户加入到docker用户组中 newgrp docker #更新用户组 docker ps #测试docker命令是否可以使用sudo正常使用 ","permalink":"https://blog.stolenzc.com/2020/docker/","summary":"安装 Ubuntu安装 sudo apt update - 更新软件包 sudo apt -y install apt-transport-https ca-certificates curl software-properties-common - 安装可能用到的依赖 curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add - - 添加阿里云源的密钥 sudo add-apt-repository \u0026quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\u0026quot; - 添加阿里云源","title":"Docker的安装及其日常使用"},{"content":"Windows下可能最好的Linux系统使用解决方案。\n前言 如何在Windows上优雅的使用Linux，一直是一个困惑我的问题。WSL虽好，但是没法在Linux上安装docker；WSL2虽然可以安装docker了，但是这个系统和主机通信又是一个大麻烦，就连最基本的安装软件都要每次开机修改hostname（虽然有能修改后不复原的办法，但我没实验成功）；使用虚拟机软件，又会占用太多的硬件资源，影响主机性能。前段时间偶然看到B站一个Up主提到使用virtualbox的headless无界面启动。遂研究了一下，但是网络上的资料大都太散太少，没有完整的介绍该方法。本文详细介绍在Windows上安装使用一个最优雅的Linux系统。\n准备 虚拟机软件：Oracle VM VirtualBox\nLinux镜像：本文使用 Ubuntu20.04\n一个远程连接软件：可以使用Windows自带的powershell或者其他软件，本文使用Termius\n前提步骤 首先需要使用VirtualBox安装好虚拟机；创建虚拟机的时候，推荐使用一个较为简单的名字作为虚拟机的名字，后面命令要使用；安装前的设置注意一点，设置密码的时候需要选择不使用密码登陆。如果该处没设置，安装好后进入设置用户中关闭该项，原因是如果打开该项，后台无法完全启动系统，最终系统会停留在用户登陆界面。\n后台启动方法 首先进入图形化的Linux虚拟机中，更新源，使用sudo apt install openssh-server安装ssh的服务端。 检查开机是否需要密码。需要取消掉开机的密码。 关闭虚拟机，主机使用命令行进入VirutalBox的安装位置，默认情况在C:\\Program Files\\Oracle\\VirtualBox\\下，此处推荐使用cmd进入该位置，cmd可以直接调用文件名字作为命令，Powershell需要使用路径加文件名才能执行命令 执行vboxheadless --startvm|-s 虚拟机名称|uuid vrde=off即可以桥接网络的模式无界面打开 执行vboxmanage controlvm 虚拟机名称 acpipowerbutton即可关闭虚拟机 其他命令 VBoxManage list vms - 查看有哪些虚拟机\nVBoxManage list vms --long - 查看虚拟机的详细内容\nVBoxManage list runningvms - 查看运行中的虚拟机\nVBoxManage startvm \u0026lt;vm_name\u0026gt; -type headless - 无界面运行虚拟机，与vboxheadless的区别就是这个命令是完全后台运行。注意：使用该命令需要将虚拟机手动设置为桥接网络。\nvboxheadless --startvm|-s 虚拟机名称|uuid vrde=off - 无界面运行虚拟机，在命令行卡住，停止命令行就停止了虚拟机\nVBoxManage controlvm \u0026lt;vm_name\u0026gt; acpipowerbutton - 正常关闭虚拟机\nVBoxManage controlvm \u0026lt;vm_name\u0026gt; poweroff - 强制关闭虚拟机\nVBoxManage guestproperty enumerate \u0026lt;vm_name\u0026gt; - 查看虚拟机配置信息，可以通过| findstr IP 查询到虚拟机的ip\n参考批处理脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 @echo off cd /d C:\\Program Files\\Oracle\\VirtualBox\\ @chcp 65001 :1 echo 1：开机 echo 2：关机 echo 3：查看ip echo 4：查看状态 echo 5: 退出 set /P a=输入： cls echo %a% if %a% == 1 ( vboxmanage startvm Ubuntu -type headless ) else if %a% == 2 ( vboxmanage controlvm Ubuntu acpipowerbutton ) else if %a% == 3 ( vboxmanage guestproperty enumerate Ubuntu | findstr IP ) else if %a% == 4 ( vboxmanage list runningvms ) else if %a% == 5 ( exit ) goto 1 参考文章 Virtualbox后台启动及获取虚拟机ip方法及windows远程登录方法\n","permalink":"https://blog.stolenzc.com/2020/virtualbox_headless/","summary":"Windows下可能最好的Linux系统使用解决方案。 前言 如何在Windows上优雅的使用Linux，一直是一个困惑我的问题。WSL虽好，但","title":"VirtualBox Headless后台运行Linux"},{"content":"教程使用环境 Windows10 insider 2004 19041.208 Microsoft office 专业增强版 2019 录制宏方法 在Excel中依次选择视图\u0026gt;宏\u0026gt;录制宏，填入名称和快捷键即可开始录制，会记录下接下来对excel表格的所有操作，对菜单操作不会记录；操作完后，点击视图\u0026gt;宏\u0026gt;结束录制，即可完成录制；可以通过查看录制进入Visual Basic for Application编辑界面\n语法解释 Dim a as Integer - 定义变量 a = 5 - 给变量赋值 For i=5 to 30...Next - for循环语句 If 条件 then ... end if - 条件判断语句 selection.offset(x, y) - 在当前选中的单元格基础上横跨y列，纵跨x行选中单元格。直接操作是操作其值。 Selection.Row - 获取当前行的行号 Selection.Column - 获取当前列的列号 sheet1.cells(x, y) - 通过行号和列号直接定位单元格，直接操作是对值进行操作。 示例代码 以下代码实现了一个从第四行到第十一行对角线循环填充的功能\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Sub 宏1() \u0026#39; \u0026#39; 宏1 宏 \u0026#39; \u0026#39; 快捷键: Ctrl+k \u0026#39; Dim r As Integer Dim c As Integer Dim value As String r = Selection.Row c = Selection.Column value = Selection.Offset(0, 0) For j = 1 To 30 r = r + 1 If r \u0026gt; 11 Then r = 4 End If Sheet1.Cells(r, j + c) = value Next End Sub 全局使用 创建宏的时候，如果需要全局使用该宏，需要用一下方法操作：\n创建时选择保存在个人宏工作簿 录制下宏操作，选择停止录制。 如果需要编辑VBS代码，需要先选择视图\u0026gt;窗口\u0026gt;取消隐藏，会自动打开一个PERSONAL.XLSB的文件，在该文件中点击查看宏\u0026gt;编辑即可进入VBS编辑界面。 编辑完成后，保存退出宏界面，然后在PERSONAL.XLSB文件中选择视图\u0026gt;窗口\u0026gt;隐藏，该文件就会隐藏。 在初始文件中就可以使用该宏，退出的时候，会弹窗是否保存PERSONAL.XLSB文件，选择保存即可。 ","permalink":"https://blog.stolenzc.com/2020/vba/","summary":"教程使用环境 Windows10 insider 2004 19041.208 Microsoft office 专业增强版 2019 录制宏方法 在Excel中依次选择视图\u0026gt;宏\u0026gt;录制宏，填入名称和快捷键即可开始录制，会记录下接下","title":"VBA小计"},{"content":"基本命令 echo 语法：echo [on/off] [message]\n说明：打开关闭回显，或显示输出消息，后面不加参数则显示当前回显设置，\n示例：\n1 2 @echo off echo hello,world 备注：回显表示终端会显示当前这条命令内容，在命令前加@可以让当前命令不显示回显，只执行结果\nrem 语法：rem 注释内容\n说明：注释掉后面的内容，不会执行，但是如果未关闭回显，该行内容会在终端显示\n示例：\n1 2 rem 你好 :: 你好 备注：rem会回显该行命令，::不会回显该行命令\npause 语法：pause\n说明：通常为暂停程序执行，在终端上显示按任意键继续\u0026hellip;\n示例：\n1 2 3 @echo off echo hello,world pause call 语法：call [文件路径] [:label] [parameter]\n说明：调用执行另一个bat文件，文件路径用绝对路径应该从磁盘开始，如C:\\Users\\stolenzc\\Desktop\\hello.bat，可以使用标签进行跳转，功能类似goto，但是使用标签前面必须加冒号，也可以向bat文件传参，另一个bat文件通过传参顺序%1、%2、%3取参数。\n示例：\n1 2 3 4 5 6 7 call :label1 hello world echo 1 :label1 echo %2 %1 rem 执行结果：world hello 1 echo打开状态 ------------分割线----------------- call C:\\Users\\stolenzc\\Desktop\\hello.bat start 语法：start 程序文件名或dos命令\n说明：调用外部程序，所有DOS命令和命令行程序都可以在start后执行\n示例：\n1 2 start calc.exe start shutdown -s -t 1000 goto 语法：goto 标签\n说明：跳转到标签处继续向下执行\n示例：\n1 2 3 :1 start goto 1 set 语法：set a=5、set a=\n说明：显示、设置或删除变量。\n参数：\n/A - 指定等号右边的字符串为数字表达式 /P - 用户输入内容赋值给变量，等号右边可以设置输入提示 示例：\n1 2 3 4 5 set a=5 echo %a% set a= echo %a% rem 执行结果：5 ECHO处于打开状态 备注：set a=表示删除变量，如果要使用变量前后需要加%\n特殊符号 @ - 本条命令在终端中关闭回显\n\u0026gt; - 将输出内容写入到文件中去\n\u0026gt;\u0026gt; - 将输出内容追加到文件中去\n\u0026lt; - 将输入信息来源指定为设备或文件\n1 set /p ifo=\u0026lt;a.txt | - 将管道前面的输出作为后面命令的输入\n^ - 将特殊符号进行转义，如| \u0026amp; \u0026gt; \u0026lt;\n% - 转义%，如%%将输出%\n\u0026amp; - 连接多个命令，前面无论成功失败都执行后面的\n\u0026amp;\u0026amp; - 连接多个命令，前面成功时执行后面的\n|| - 连接多个命令，前面失败时执行后面的\n文件管理 ","permalink":"https://blog.stolenzc.com/2020/windows_cmder/","summary":"基本命令 echo 语法：echo [on/off] [message] 说明：打开关闭回显，或显示输出消息，后面不加参数则显示当前回显设置， 示例： 1 2 @echo off echo hello,world 备注：回显表示终端会显示当","title":"Windows批处理命令"},{"content":"介绍一些关机计算机网络的相关知识，包括TCP、HTTP、HTTPS、WebSocket等。\nTCP连接过程 状态码含义：\nSYN(synchronous) - 表示建立连接 ACK(acknowledgment) - 表示响应 FIN(finish) - 表示关闭连接 RST(reset) - 表示重置 PSH(push) - 表示有Data传送 URG(urgent) - 表示紧急 Sequence Number - 顺序号码 Acknowledge Number - 确认号码 三次握手：\n主机A发送位码为syn=1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机。 主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ack=1，随机产生seq=7654321的包。 主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ack=1，主机B收到后确认seq值与ack=1则连接建立成功。 四次挥手：\n主机A发送位码为fin=1，seq number=(前面已经传送过来的数据的最后一个字节的序号加1)并发送，主机B由fin=1知道A要关闭连接。 主机B返回ack=1，ack number=(主机A的seq=1)，随机产生seq number=1234567。然后等待主机B的socket服务关闭。 主机B的socket服务关闭后，向主机A发送fin=1，ack=1，ack number=(主机A的seq=1)，seq number=(前面已经传送过来的数据的最后一个字节的序号加1)并发送。 主机A收到主机B的fin后，返回ACK=1，ack number=(最后一次发送过来的seq number加1) TCP和UDP的区别 UDP TCP 是否连接 无连接 面向连接 是否可靠 不可靠传输，不使用流量控制和拥塞控制 可靠传输，使用流量控制和拥塞控制 连接对象个数 支持一对一，一对多，多对一和多对多交互通信 只能是一对一通信 传输方式 面向报文 面向字节流 首部开销 首部开销小，仅8字节 首部最小20字节，最大60字节 适用场景 适用于实时应用（IP电话、视频会议、直播等） 适用于要求可靠传输的应用，例如问卷传输 TCP向上层提供面向连接的可靠服务，UDP向上层提供无连接不可靠服务 虽然UDP并没有TCP传输来的准确，但是也能在很多实用性要求高的地方有所作为 对数据准确性要求高，速度可以相对较慢的，可以选用TCP Socket socket是一种应用程序接口，一般指的是网络中一个连接的两端，socket中通常封装了TCP和UDP的通信方式，直接使用socket就可以进行TCP或UDP的对话。\nSOCK_STREAM - 可靠数据传输，基于TCP SOCK_DGRAM - 不可靠数据传输，基于UDP HTTP HTTP是一个基于TCP协议的超文本传输协议。\n请求体结构：\n请求行 - 请求体 - 空行 - 消息体\n1 2 3 4 5 GET / HTTP/1.1 Host: www.baidu.com Connection: keep-alive Cache-Control: max-age=0 ...... 响应体结构：\n响应头 - 响应体 - 空行 - 消息体\n1 2 3 4 5 HTTP/1.1 200 OK Bdpagetype: 2 Bdqid: 0xb6dda1710004f934 Cache-Control: private ...... HTTP 0.9 只有GET请求 服务器只能回应HTML格式的字符串 HTTP 1.0 增加了POST和HEAD请求 可以发送任何格式的内容 每次通信都必须包括头信息 状态码（status code）、多字符集支持、多部分发送（multi-part type）、权限（authorization）、缓存（cache）、内容编码（content encoding）等。 HTTP 1.1 持久连接：Connection: keep-alive 管道机制：同一个TCP连接里面，客户端可以同时发送多个请求。 Content-Length 字段：声明本次回应的数据长度。 分块传输编码：Transfer-Encoding: chunked，对不定长度的内容使用分块传输 新增了许多动词方法：PUT、PATCH、HEAD、 OPTIONS、DELETE。 新增了Host字段，用来指定服务器的域名 HTTP 2 二进制协议：将HTTP 1.1中数据头为文本，数据体为文本或二进制，改为全为二进制，统称为帧（frame）：头信息帧和数据帧。 多功：在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且不用按照顺序一一对应，这样就避免了\u0026quot;队头堵塞\u0026quot;。 数据流：将每个请求或回应的所有数据包，称为一个数据流（stream）。每个数据流都有一个独一无二的编号。数据包发送的时候，都必须标记数据流ID，用来区分它属于哪个数据流。另外还规定，客户端发出的数据流，ID一律为奇数，服务器发出的，ID为偶数。 头信息压缩：头信息使用gzip或compress压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就提高速度了。 服务器推送：允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送（server push）。 参考链接：互联网协议入门（一）、互联网协议入门（二）、HTTP 协议入门\nHTTP和HTTPS HTTPS是在HTTP的基础上对传输的内容进行了加密。\nHTTPS传输就是在HTTP的传输过程上添加了ssl校验\n客户端发出请求：支持的协议版本，比如TLS 1.0版；一个客户端生成的随机数，稍后用于生成\u0026quot;对话密钥\u0026quot;；支持的加密方法，比如RSA公钥加密； 支持的压缩方法。\n服务器回应：确认使用的加密通信协议版本，比如TLS 1.0版本；一个服务器生成的随机数，稍后用于生成\u0026quot;对话密钥\u0026quot;；确认使用的加密方法，比如RSA公钥加密；服务器证书。\n客户端回应：客户端验证服务器证书有效后，向服务器发送三个信息：一个随机数。该随机数用服务器公钥加密，防止被窃听；编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送；客户端握手结束通知，表示客户端的握手阶段已经结束。\n服务器的最后回应：将客户机发送的随机数解密后，向客户机发送两个信息：编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送；服务器握手结束通知，表示服务器的握手阶段已经结束。\n至此，整个握手阶段全部结束。接下来，客户端与服务器进入加密通信，就完全是使用普通的HTTP协议，只不过用\u0026quot;会话密钥\u0026quot;加密内容。\n参考内容：SSL/TLS协议运行机制的概述\nHTTP状态码 状态码 状态码英文名称 中文描述 100 Continue 继续。客户端应继续其请求 101 Switching Protocols 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议 状态码 状态码英文名称 中文描述 200 OK 请求成功，一般用于GET与POST请求 201 Created 已创建，成功请求并创建了新的资源 202 Accepted 已接受，已经接受请求，但未处理完成 203 Non-Authoritative Information 非授权信息。请求成功。服务器已成功处理了请求，但返回的信息可能来自另一来源。 204 No Content 无内容。服务器成功处理，但未返回内容。 205 Reset Content 重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。 206 Partial Content 部分内容，服务器成功处理了部分GET请求 状态码 状态码英文名称 中文描述 300 Multiple Choices 多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端选择 301 Moved Permanently 永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI 302 Found 临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI 303 See Other 查看其它地址。与301类似。使用GET和POST请求查看 304 Not Modified 所请求的资源未修改，服务器不会返回任何资源。客户端通过一个头信息指定日期之后修改的资源 305 Use Proxy 使用代理。所请求的资源必须通过代理访问 306 Unused 已经被废弃的HTTP状态码 307 Temporary Redirect 临时重定向。与302类似。使用GET请求重定向 状态码 状态码英文名称 中文描述 400 Bad Request 客户端请求的语法错误，服务器无法理解 401 Unauthorized 请求要求用户的身份认证 402 Payment Required 保留，将来使用 403 Forbidden 服务器理解请求客户端的请求，但是拒绝执行此请求 404 Not Found 服务器无法根据客户端的请求找到资源（网页） 405 Method Not Allowed 客户端请求中的方法被禁止 406 Not Acceptable 服务器无法根据客户端请求的内容特性完成请求 407 Proxy Authentication Required 请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权 408 Request Time-out 服务器等待客户端发送的请求时间过长，超时 409 Conflict 服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突 410 Gone 客户端请求的资源已经不存在。通常标识资源以前有现在被永久删除了 411 Length Required 服务器无法处理客户端发送的不带Content-Length的请求信息 412 Precondition Failed 客户端请求信息的先决条件错误 413 Request Entity Too Large 由于请求的实体过大，服务器无法处理，因此拒绝请求 414 Request-URI Too Large 请求的URI过长（URI通常为网址），服务器无法处理 415 Unsupported Media Type 服务器无法处理请求附带的媒体格式 416 Requested range not satisfiable 客户端请求的范围无效 417 Expectation Failed 服务器无法满足Expect的请求头信息 状态码 状态码英文名称 中文描述 500 Internal Server Error 服务器内部错误，无法完成请求 501 Not Implemented 服务器不支持请求的功能，无法完成请求 502 Bad Gateway 作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应 503 Service Unavailable 由于超载或系统维护，服务器暂时的无法处理客户端的请求 504 Gateway Time-out 充当网关或代理的服务器，未及时从远端服务器获取请求 505 HTTP Version not supported 服务器不支持请求的HTTP协议的版本，无法完成处理 参考内容：HTTP状态码\n","permalink":"https://blog.stolenzc.com/2020/network/","summary":"介绍一些关机计算机网络的相关知识，包括TCP、HTTP、HTTPS、WebSocket等。 TCP连接过程 状态码含义： SYN(synchronous) - 表示建立连接 ACK(acknowledgment) - 表示","title":"网络相关技术点"},{"content":"总结MySQL基础知识，不涉及数据库CRUD基础语法\nSQL名词 DQL（Data Query Language）：数据查询语言，指Select语句，通常会归类到DML中 DDL（Data Definition Language）：数据定义语言，通常指Create、Drop、Alter等对表操作的语句 DML（Data Manipulation Language）：数据操作语言，通常指Insert、Delete、Update等对数据操作的语句 DCL（Data Control Language）：数据控制语言，通常指Grant、Revoke等对数据库权限控制的语句 数据库三范式 原子性：数据不可再分 唯一性：所有数据都要和数据表中的键有完全依赖关系 冗余性：非键属性之间是完全无关的 数据完整性 实体完整性：每个实体都是独一无二的\n主键（primary key） 唯一约束 唯一索引（unique） 引用完整性（参照完整性）：关系中不允许引用不存在的实体\n外键（foreign key） 域完整性：数据是有效的\n数据类型及长度 非空约束（not null） 默认值约束（default） 检查约束（check） 说明：在MySQL数据库中，检查约束并不起作用。\n数据一致性 实现原理：事务\n数据库相关的命令 普通命令 SHOW ENGINES; - 查看数据库支持的数据引擎\nbegin/start transaction - 开启事务\ncommit/rollback - 提交/回滚\nexplain sql语句 - 查看执行计划\nsavepoint 保存点名称 - 在事务中添加保存点\nrollback [work] to [savepoint] 保存点名称 - 事务中回滚到保存点\nrelease savepoint 保存点名称 - 删除保存点\n变量命令 注意：变量的查看可以通过show variables like '%变量名%'，也可以通过select @@变量名，非特殊情况不做说明\nshow global variables; - 查看所有全局变量\nshow variables; - 查看局部变量\nshow variables like '%storage_engine%'; - 查看数据库的默认引擎，此处storage_engine不是完整的变量名\nshow variables like '%datadir%'; - 查看当前数据保存位置\nshow variables like \u0026quot;innodb_page_size\u0026quot;; - 查看innodb一个数据页的大小\nset session autocommit = on/off - 设定事务是否自动开启\nselect @@tx_isolation; - 查看数据库的事务隔离级别（8.0.3之前版本）\nselect @@transaction_isolation; - 查看数据库的事务隔离级别（8.0.3之后版本）\nset session transaction isolation level 事务隔离名称 - 设置事务隔离级别\nMySQL数据引擎 特性 InnoDB MRG_MYISAM MEMORY MyISAM 存储限制 有 没有 有 有 事务、集群索引、外键 支持 锁机制 行锁 表锁 表锁 表锁 B树索引、索引缓存 支持 支持 支持 支持 哈希索引 支持 全文检索 支持（5.6+） 支持 数据缓存 支持 支持 数据可压缩 支持 内存使用 高 低 中 低 存储空间使用 高 低 低 批量插入性能 低 高 高 高 MySQL从5.5开始默认使用InnoDB，InnoDB也是唯一一个支持外键、事务、行锁的数据引擎。\nInnoDB 支持事务安全表（ACID）\nA（Atomicity）：原子性；事务，要么全成功，要么全失败 C（Consistency）：一致性；事务前后数据的完整性必须保持一致。 I（Isolation）：隔离性；多个事务之间相互隔离 D（Durability）：持久性；持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的 事务特性的实现\n隔离性：读写锁 + MVCC 事务隔离级别：\n无事务隔离级别：会出现第一类丢失更新、脏读、不可重复读、第二类丢失更新和幻读 Read uncommitter（未提交读）：会出现脏读、不可重复读、第二类丢失更新、幻读，解决了第一类丢失更新 Read Committer（提交读）：会出现不可重复读、第二类丢失更新、幻读，解决了脏读和第一类丢失更新 Repeatable Read（可重复读）：会出现幻读，解决了脏读、不可重复读和第二类丢失更新，MySQL默认的级别，InnoDB引擎下该级别也解决了幻读 Serializable（串行化）：最安全，速度最慢，所有问题都解决了 备注：\n第一类丢失更新：撤销一个事务的时候，把其他事务已提交的更新覆盖了 脏读：一个事务修改了数据未提交，另一个事务读到了修改后的数据 不可重复读：第一个事务读取了数据后，第二个事务修改了该数据，第一个事务再次读该数据就会读到和第一次不同是数据 第二类丢失更新：一个事务提交更新的时候，将其他事务已提交的事务覆盖了，是不可重复读的特例 幻读：事务一操作了数据库的多条记录，事务二向数据库中插入一条满足事务一操作的数据。事务一中就会发现这条满足条件的数据。像是出现幻觉一样 第一类丢失更新 脏读 第二类丢失更新 不可重复读 幻读 Read uncommitted ✅ ❌ ❌ ❌ ❌ Read Committed ✅ ✅ ❌ ❌ ❌ Repeatable Read ✅ ✅ ✅ ✅ ❌ Serializable ✅ ✅ ✅ ✅ ✅ 索引 MySQL中，所有数据类型的列都可以被索引，常用的存储引擎InnoDB和MyISAM能支持每个表创建16个索引。InnoDB和MyISAM使用的索引其底层算法是B-tree（B树），B-tree是一种自平衡的树，类似于平衡二叉排序树，能够保持数据有序。这种数据结构能够让查找数据、顺序访问、插入数据及删除的操作都在对数时间内完成。\nB-tree：是一颗多路平衡查找树；\n每个节点最多有m-1个关键字。 根节点最少可以只有1个关键字。 非根节点至少有m/2个关键字。 每个节点中的关键字都按照从小到大的顺序排列，每个关键字的左子树中的所有关键字都小于它，而右子树中的所有关键字都大于它。 所有叶子节点都位于同一层，或者说根节点到每个叶子节点的长度都相同。 每个节点都存有索引和数据，也就是对应的key和value。 B+tree：\n根节点至少一个元素。 非根节点元素范围：m/2 \u0026lt;= k \u0026lt;= m-1。 B+树有两种类型的节点：内部结点（也称索引结点）和叶子结点。内部节点就是非叶子节点，内部节点不存储数据，只存储索引，数据都存储在叶子节点。 内部结点中的key都按照从小到大的顺序排列，对于内部结点中的一个key，左树中的所有key都小于它，右子树中的key都大于等于它。叶子结点中的记录也按照key的大小排列。 每个叶子结点都存有相邻叶子结点的指针，叶子结点本身依关键字的大小自小而大顺序链接。 父节点存有右孩子的第一个元素的索引。 参考链接：面试官问你B树和B+树，就把这篇文章丢给他\n","permalink":"https://blog.stolenzc.com/2020/test_mysql_basic/","summary":"总结MySQL基础知识，不涉及数据库CRUD基础语法 SQL名词 DQL（Data Query Language）：数据查询语言，指Select语句，通常会","title":"MySQL基础"},{"content":"记录一些Edge插件和用法\n插件 iGG谷歌访问助手 安装地址：iGG谷歌访问助手\n该插件可以通过Edge商店安装，安装该助手可以访问到google旗下的一些网站，例如谷歌搜索、谷歌play、Gmail，最重要的是可以访问Chrome插件商店，那么Chrome商店中所有的插件都可以安装了。\nPDF Viewer 安装地址：PDF Viewer\nEdge目前有一个较大的功能缺失就是PDF阅读，使用该插件可以有效的弥补该功能的缺陷，该插件在Edge插件商店没有上架，只能科学上网访问Chrome插件商店安装。\n注意：\nEdge 86以上的版本中阅读pdf已经带有目录 使用该插件需要在插件的设置中勾选允许访问文件URL IDM Integration Module 这是一个IDM的补充插件，在安装IDM的时候会自动进入微软商店进行安装。安装好后可以进行网页嗅探，比如视频，歌曲等内容都能嗅探到下载链接。该插件没有安装地址，只需安装IDM即可。IDM相关信息详见：IDM\n注意：该插件只适用于Windows\nTampermonkey 安装地址：Tampermonkey\n油猴插件，浏览器最强大的扩展插件，通过安装脚本可以获得许多高级的功能，该插件在Edge插件商店和Chrome插件商店都有。\n脚本推荐：\n科学上网插件，详情参见科学上网 网盘助手插件， 网盘助手 获取脚本，进入百度网盘，选中文件，点击生成链接，获得链接后使用IDM或者迅雷即可下载 网页翻译插件，翻译 获取脚本，支持三种翻译引擎 百度优化插件，百度重定向插件 获取脚本，支持去除百度链接的重定向，去除广告，自动翻页等功能 倍速视频插件，计时器掌控者 自定义倍速视频，可以方便跳过广告 谷歌翻译 安装地址：谷歌翻译\n便捷上国外网站使用，可以进行网页翻译，也可以使用划词查询。使用划词查询需要允许上传内容。\n注意：该插件的所有翻译均是通过translate.google.com提供支持。需要使用科学上网才能进行正常的翻译使用。使用谷歌访问助手也可。\n彩云小译 安装地址：彩云小译\n一款支持划词翻译、整个网页翻译的插件，该插件不用使用科学上网即可使用，并且该插件进行整页翻译时会保留原来的网页内容。方便进行对照。在一定程度上比谷歌翻译更好用。\nAdblockPlus 安装地址：AdblockPlus\n广告拦截器，该插件可以拦截大部分的弹窗广告，使用拦截元素还可以去除掉百度热搜之类的内容\nCookie Editor 安装地址：Cookie Editor\n能够更方便的编辑网站的cookie内容，在浏览器控制台-应用程序-存储-Cookie中也可以进行相同的编辑\nDark Reader 安装地址：DarkReader\n这个插件对长时间使用浏览器用户非常友好，可以自适应计算界面的颜色，使整个网页背景变为黑色，该插件在大部分的网页上的显示都非常完美。但是依然会有部分网页显示可能有问题。\n注意: 最近才发现Edge浏览器自带这个功能，在设置外观中将主题改为黑色，然后进入edge://flags，将Force Dark Mode for Web Contents 改为Enable也能实现黑色效果\nListen1 安装地址：github ，微软插件商店\n浏览器听歌聚合平台。聚合了包括网易云音乐、虾米音乐、咪咕音乐、QQ音乐等平台的歌曲，可以同步歌单到Github Gist。\nUndo closed tabs button 安装地址：Undo closed tabs button\n一个可以便捷恢复已经关闭的tabs页的插件。\n百度药丸 安装地址：百度药丸\n解决网页使用百度的许多痛点，比如去掉百度热搜（分散注意力的东西）、去除推广、阻止百度推广等。常用百度的人员必备插件。\n有范全网通 安装地址：有范全网通\n可以看到视频网站上VIP的视频\n高级输入 thisisunsafe - 遇到网页因为不安全而无法访问且没有跳过按钮的情况，不用定位光标到任何位置，活动窗口选择为Edge浏览器，直接输入即可\nedge://flags\nParallel downloading - 开启并行下载（使用多线程下载） Force Dark Mode for Web Contents - 对网页内容强制启用黑夜模式 ","permalink":"https://blog.stolenzc.com/2020/edge/","summary":"记录一些Edge插件和用法 插件 iGG谷歌访问助手 安装地址：iGG谷歌访问助手 该插件可以通过Edge商店安装，安装该助手可以访问到google","title":"Edge上手"},{"content":"使用GitHub的一些技巧\nGitHub加速访问 1. 修改host文件达到加速目的 以下方法被写在一个python文件中，可以直接使用github faster执行python文件进行修改刷新\n获取GitHub网站的最快地址，使用https://www.ipaddress.com/开获取GitHub的IP地址\n修改hosts文件，Mac和Linux在/etc/hosts下，Windows在通常在C:\\windows\\System32\\drivers\\etc\\hosts下，在结尾添加以下地址的IP\n1 2 3 4 5 6 7 8 9 10 11 12 13 140.82.114.4 github.com 199.232.69.194 github.global.ssl.fastly.net 64.71.168.201 github.community 199.232.68.133 avatars.githubusercontent.com 199.232.68.133 avatars0.githubusercontent.com 199.232.68.133 avatars1.githubusercontent.com 199.232.68.133 avatars2.githubusercontent.com 199.232.68.133 avatars3.githubusercontent.com 199.232.68.133 avatars4.githubusercontent.com 199.232.68.133 camo.githubusercontent.com 199.232.68.133 cloud.githubusercontent.com 199.232.68.133 githubusercontent.com 199.232.96.133 user-images.githubusercontent.com 刷新hosts文件，Mac和Linux可以使用sudo killall -HUP mDNSResponder，Windows使用ipconfig /flushdns\n参考文档：Mac 解决GitHub下载速度太慢问题\n2. 使用加速镜像克隆 该方法只适用与对代码仓库进行克隆，不支持ssh方法\n使用 github.com.cnpmjs.org 来替换原本的网站中的 github.com\n如 git clone https://github.com/stolenzc/github_faster.git 替换为 git clone https://github.com.cnpmjs.org/stolenzc/github_faster.git\n快速项目检索 检索方法：\n1 2 3 4 5 6 7 in:name xxx # 按照项目名/仓库名搜索（大小写不敏感） in:readme xxx # 按照README搜索（大小写不敏感） in:description xxx # 按照description搜索（大小写不敏感） stars:\u0026gt;xxx # stars数大于xxx forks:\u0026gt;xxx # forks数大于xxx language:xxx # 编程语言为xxx pushed:\u0026gt;YYYY-MM-DD # 最新更新时间晚于YYYY-MM-DD **注意：**多个条件之间可以使用空格隔开\nRelease发包 在项目的release窗格下，点击Draft a new release 填入Tag版本，描述之类的东西，然后点击或者将文件拖入到Attach binaries by dropping them here or selecting them. 点击Publish release即可完成发包，如果是测试包，可以勾选上this is a pre-release GitHub Action 介绍 GitHub官方action仓库：Github Action官方市场，第三方仓库：wesome actions\n使用action方式：使用git的指针概念，详情参考Github Docs\n1 2 3 actions/setup-node@74bc508 # 指向一个 commit actions/setup-node@v1.0 # 指向一个标签 actions/setup-node@master # 指向一个分支 配置 在项目根目录下的.github/workflows/下的yml文件\nyml文件配置：\nname: workflow的名称，如果未设置默认为yml文件名\non: 触发action的条件，可选为on.\u0026lt;push|pull_request\u0026gt;.\u0026lt;tags|branches\u0026gt;\njobs: workflow的工作主体，表示每一项具体的工作，jobs下面通常需要写清楚job_id，可以自定义。如jobs:build。job_id下面为以下字段：\nname: 定义字段任务说明\nneeds: 表示任务的依赖关系，表示运行该任务之前必须运行什么。\nruns-on: 运行任务需要的虚拟机环境，可选参数为：\nubuntu-latest，ubuntu-18.04或ubuntu-16.04\nwindows-latest，windows-2019或windows-2016\nmacOS-latest或macOS-10.14\nsteps: 每个job包含的步骤，可以配置为:\nname: 步骤名称\nuses: 使用的action\nwith: github action的入参\nrun: 执行的命令\nenv: 设置为环境变量\n实例 hexo项目编译并发送到阿里云ESC的指定目录\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 name: Hexo build and deploy on: push: branches: - master jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v2 # If you\u0026#39;re using actions/checkout@v2 you must set persist-credentials to false in most cases for the deployment to work correctly. with: persist-credentials: false # checkout到你的hexo代码分支 ref: master # hexo需要加载内部子模块 submodules: true - name: Install and Build run: | npm install npm run build - name: Deploy to aliyun server uses: easingthemes/ssh-deploy@v2.0.7 env: SSH_PRIVATE_KEY: ${{ secrets.ALIYUN_SERVER_ACCESS_TOKEN }} ARGS: \u0026#34;-avz --delete\u0026#34; SOURCE: \u0026#34;public/\u0026#34; REMOTE_HOST: ${{ secrets.ALIYUN_SERVER_HOST }} REMOTE_USER: \u0026#34;root\u0026#34; TARGET: \u0026#34;/home/blog/\u0026#34; 该配置需要在secret里面配置阿里云的私钥，然后将阿里云的公钥添加到阿里云的~/.ssh/authorized_keys文件中添加阿里云中生成的公钥\n该配置表示直接将hexo编译后的deploy下的文件拷贝到/blog/下，没有二级目录。\n参考内容：阮一峰博客， Github Action发布阿里云ECS\n","permalink":"https://blog.stolenzc.com/2020/github_use/","summary":"使用GitHub的一些技巧 GitHub加速访问 1. 修改host文件达到加速目的 以下方法被写在一个python文件中，可以直接使用github f","title":"GitHub使用方法"},{"content":"Windows Terminal的一些使用教程和配置教程\n配置教程 详细配置参阅Windows Terminal Settings Schema\n有关中文翻译参阅\nGlobal 1 2 3 4 5 6 7 8 9 10 11 12 13 { // 默认的命令行工具 \u0026#34;defaultProfile\u0026#34; : \u0026#34;{58ad8b0c-3ef8-5f4d-bc6f-13e4c00f2530}\u0026#34;, // 窗口宽度 \u0026#34;initialCols\u0026#34; : 90, // 窗口高度 \u0026#34;initialRows\u0026#34; : 25, // 默认主题 \u0026#34;requestedTheme\u0026#34; : \u0026#34;system\u0026#34;, // 快捷键配置 \u0026#34;keybindings\u0026#34; : [] ... } profile 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 { // 设置命令行的唯一id \u0026#34;guid\u0026#34;: \u0026#34;{61c54bbd-c2c6-5271-96e7-009a87ff44bf}\u0026#34;, // 设置命令行显示的名称 \u0026#34;name\u0026#34;: \u0026#34;Windows PowerShell\u0026#34;, // 设置命令行执行时候运行的程序 \u0026#34;commandline\u0026#34;: \u0026#34;powershell.exe\u0026#34;, // 设置命令行的字体 \u0026#34;fontFace\u0026#34;: \u0026#34;Cascadia Code\u0026#34;, // 设置命令行的字体大小 \u0026#34;fontSize\u0026#34;: 14, // 设置是否显示该命令行 \u0026#34;hidden\u0026#34;: false, // 设置启动后所在的路径 \u0026#34;startingDirectory\u0026#34; : null, // 使用不透明度 \u0026#34;useAcrylic\u0026#34;: true, // 不透明度 \u0026#34;acrylicOpacity\u0026#34;: 0.75, // 退出后关闭 \u0026#34;closeOnExit\u0026#34;: true, // 颜色主题选择（需要在Schema中配置） \u0026#34;colorScheme\u0026#34;: \u0026#34;Campbell\u0026#34;, // 光标颜色 \u0026#34;cursorColor\u0026#34;: \u0026#34;#FFFFFF\u0026#34;, // 光标类型，可选值 \u0026#34;vintage\u0026#34; ( ▃ ), \u0026#34;bar\u0026#34; ( ┃ ), // \u0026#34;underscore\u0026#34; ( ▁ ), \u0026#34;filledBox\u0026#34; ( █ ), \u0026#34;emptyBox\u0026#34; ( ▯ ) \u0026#34;cursorShape\u0026#34;: \u0026#34;bar\u0026#34;, // 历史大小 \u0026#34;historySize\u0026#34;: 9001, \u0026#34;padding\u0026#34;: \u0026#34;0, 0, 0, 0\u0026#34;, // 嗅探输入 \u0026#34;snapOnInput\u0026#34;: true }, **注意：**如果每个命令行工具的配置相同，可以配置在default中，表示对所有命令行生效\n**注意：**如果配置中需要填写路径，用Windows中的\\时需要进行转义，可以使用/来表示路径\n在当前目录打开方法 配置命令行的startingDirectory为null 在需要打开的目录中按ctrl + L或者光标定位到文件管理器地址栏 输入wt，按回车，就会从当前目录中打开Windows Terminal默认的命令行工具 配置键盘切换tab页 在配置中的keybindings中添加{ \u0026quot;command\u0026quot;: { \u0026quot;action\u0026quot;: \u0026quot;switchToTab\u0026quot;, \u0026quot;index\u0026quot;: 0}, \u0026quot;keys\u0026quot;: [\u0026quot;ctrl+alt+1\u0026quot;]}, 如果经常打开多个标签页，可以多配置几条信息 使用ctrl+alt+数字键就可以完成tab页的切换 快捷键 shift + alt + = - 横向分屏\nshift + alt + - - 竖向分屏\n","permalink":"https://blog.stolenzc.com/2020/windows_terminal/","summary":"Windows Terminal的一些使用教程和配置教程 配置教程 详细配置参阅Windows Terminal Settings Schema 有关中文翻译参阅 Global 1 2 3 4 5 6 7 8 9 10 11 12 13 { // 默认的命令","title":"Windows Terminal使用技巧"},{"content":"准备工具 Auto.js手机app\n电脑开发推荐使用VScode\n开发步骤 VScode编辑js脚本文件\nVScode点击查看\u0026gt;命令面板输入auto.js:start server启动服务；手机打开auto.js然后左滑打开连接电脑，输入电脑的ip地址（局域网地址），连接成功后VScode右下角会有弹出连接成功显示；电脑按F5键就可以将当前活动页代码发送到手机上执行。\n操作命令 VScode：\nauto.js:Start Server - 启动远程操作服务 auto.js:Stop Server - 停止远程操作服务 auto.js:Run / F5 - 在手机上运行当前活动页程序 auto.js:Stop - 在手机上停止当前活动页脚本 auto.js:StopAll - 停止手机上运行的所有脚本 auto.js:Save - 将当前文件保存到手机默认目录下 auto.js:Run Project - 在手机上运行项目 auto.js:Save Project - 在手机上保存项目 常用函数 详细参考命令到Auto.js文档\n注意：此处仅仅介绍本人用过的命令\n一般全局函数 sleep(n) - 暂停运行n毫秒的时间 home() - 相当于点击安卓的home按键 back() - 相当于点击安卓的back按键 toast(message) - 以气泡显示信息message几秒，安卓一般为2秒 exit() - 立刻停止脚本运行 setScreenMetrics(x, y) - 设置屏幕分辨率 点击 click(x, y) - 点击指定的像素点 click(text[, i]) - 点击文本，入过有多个，则点击第i个，i从0开始数，不指定则会将所有的文本点击一次，返回是否全部成功 while(!click(\u0026quot;扫一扫\u0026quot;)); - 点击扫一扫，从文本处向其父视图寻找，直至发现一个可点击的部件为止。 swipe(x1, y1, x2, y2, duration) - 从(x1, y1)滑动到(x2, y2)，持续时间为duration毫秒 press(x, y, duration) - 长按(x, y)点，持续时间为duration毫秒 应用 launchApp(appName) - 指定应用名启动应用，如“支付宝” launch(packageName) - 指定应用的包名启动应用，如“com.eg.android.AlipayGphone”，该方法启动应用更快 图片和颜色 requestScreenCapture([landscape]) - 获取截图权限，返回是否具有权限；landscape为false, 则表示竖屏截图; true为横屏截图；该方法只用执行一次 captureScreen() - 截取屏幕，返回一个image对象 images.pixel(image, x, y) - 返回image图片(x, y)位置的ARGB值，用0xAARRGGBB表示 images.findColor(image, color, options) - 区域找色，image中找color颜色，options为一个类似python字典的对象，region为区域，指定左上角x，y和区域的宽和高，threshold为颜色相似度，0为相同，255为所有颜色都相似，默认为4 images.findColorInRegion(img, color, x, y[, width, height, threshold]) - 用法同findColor images.findImage(img, template[, options]) - 以图找图，img为原图，template为模板图，options和findColor用法相似；threshold图片相似度，取值范围为0~1的浮点数。默认值为0.9。region找图区域，用法和findColor一样，level默认不设置，会自动调整图片大小。 images.findImageInRegion(img, template, x, y[, width, height, threshold]) - 用法和findImage一样 colors.toString(color) - 将颜色值转换为字符串 代码示例 监控我的支付宝蚂蚁庄园是否有小鸡偷吃的脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 \u0026#34;auto\u0026#34;; // 设置分辨率 setScreenMetrics(1080, 1920); // 获取竖屏截图权限 requestScreenCapture(false); main(); function main(){ app.launch(\u0026#34;com.eg.android.AlipayGphone\u0026#34;); sleep(2000); // 判断是否是主页 while(!check_alipay_home()){ back(); sleep(1000); }; // check_ant_home(); watched_me(); } // 检查并进入支付宝首页 function check_alipay_home(){ var scan = text(\u0026#39;首页\u0026#39;).findOnce(); var pay = text(\u0026#39;理财\u0026#39;).findOnce(); if(scan != null \u0026amp;\u0026amp; pay != null){ while(!click(\u0026#34;首页\u0026#34;)); return true }else{ return false } } // 判断是否进入了蚂蚁界面 function check_ant_home(){ while(!click(\u0026#34;蚂蚁庄园\u0026#34;)); sleep(800); while(true){ var img = captureScreen(); var color1 = images.pixel(img, 100, 200); var colors1 = colors.toString(color1); if(colors1 == \u0026#34;#ffb7eaff\u0026#34;){ sleep(500); } else{ sleep(500); break; } } } // 监控我的蚂蚁庄园 function watched_me(){ while(true){ // 进入蚂蚁庄园主页 check_ant_home(); // 获取截图 var img = captureScreen(); // 判断左右是否有小鸡 var color1 = images.pixel(img, 400, 1300); var color2 = images.pixel(img, 850, 1300); var colors1 = colors.toString(color1); var colors2 = colors.toString(color2); // 如果有小鸡来了，播放歌曲后退出 if(colors1==\u0026#34;#ff000000\u0026#34; || colors2==\u0026#34;#ff000000\u0026#34;){ media.playMusic(\u0026#34;/storage/emulated/0/MIUI/.ringtone/五月天 我不愿让你一个人_\u0026amp;_5b2e2bd6-6230-45c4-a1a5-e2a6bcdcd4b2.mp3\u0026#34;); sleep(30000); exit(); } toast(colors1 + colors2) back(); sleep(700); } } 监控蚂蚁庄园前三名是否有小鸡偷吃的脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 \u0026#34;auto\u0026#34;; // 设置分辨率 setScreenMetrics(1080, 1920); // 获取竖屏截图权限 requestScreenCapture(false); main(); function main(){ app.launch(\u0026#34;com.eg.android.AlipayGphone\u0026#34;); sleep(2000); // 判断是否是主页 while(!check_alipay_home()){ back(); sleep(1000); }; // check_ant_home(); watched_other(); } // 检查并进入支付宝首页 function check_alipay_home(){ var scan = text(\u0026#39;首页\u0026#39;).findOnce(); var pay = text(\u0026#39;理财\u0026#39;).findOnce(); if(scan != null \u0026amp;\u0026amp; pay != null){ while(!click(\u0026#34;首页\u0026#34;)); return true }else{ return false } } // 判断是否进入了蚂蚁界面 function check_ant_home(){ while(!click(\u0026#34;蚂蚁庄园\u0026#34;)); sleep(800); while(true){ var img = captureScreen(); var color1 = images.pixel(img, 100, 200); var colors1 = colors.toString(color1); if(colors1 == \u0026#34;#ffb7eaff\u0026#34;){ sleep(500); } else{ sleep(500); break; } } } function watched_other(){ check_ant_home(); while(true){ // 点击小鸡庄园的好友 click(156,1721); sleep(1000); // 截图 var img = captureScreen(); // 监控第一位好友 var color1 = images.pixel(img,940,1380); var colors1 = colors.toString(color1); // 监控第二位好友 var color2 = images.pixel(img,940,1570); var colors2 = colors.toString(color2); // 监控第三个好友 var color3 = images.pixel(img,940,1760); var colors3 = colors.toString(color3); // 判断是否有小鸡来了，有小鸡来了像素点的值为#ff333333 if(colors1==\u0026#34;#ff333333\u0026#34; ||colors2==\u0026#34;#ff333333\u0026#34; ||colors3==\u0026#34;#ff333333\u0026#34; ){ media.playMusic(\u0026#34;/storage/emulated/0/MIUI/.ringtone/五月天 我不愿让你一个人_\u0026amp;_5b2e2bd6-6230-45c4-a1a5-e2a6bcdcd4b2.mp3\u0026#34;); sleep(30000); exit(); } toast(colors1 + colors2 + colors3) back(); sleep(1000); } } ","permalink":"https://blog.stolenzc.com/2020/autojs/","summary":"准备工具 Auto.js手机app 电脑开发推荐使用VScode 开发步骤 VScode编辑js脚本文件 VScode点击查看\u0026gt;命令面板输入au","title":"Auto.js自动化脚本开发"},{"content":"分享一些Windows在使用时遇到的一些问题和一些解决办法，每个方法自己均实验过，确保能用，但不确保是最好的解决办法\nAMD显卡开机黑屏 升级Windows10后，许多搭载AMD显卡的老机器开机的时候会有一到两分钟的黑屏时间，究其原因就是ulps导致的，一般解决办法有一下两种，一下办法提到的工具打包在win10-amd_黑屏文件：\n方法一：\n在控制面版中卸载AMD的显卡程序 卸载完毕后，从win10设置-更新和安全-恢复-高级启动-立即重新启动中进入安全模式 在安全模式中使用DDU，单机清除并重启（clear and restart） 开机后，打开wushowhide.diagcab文件，选择hide updatas 重新安装最新显卡驱动 方法二：\n运行ULPS中的disable注册表文件 选择重启（注意：不是关机，是重启） 在桌面右键-显示卡属性-电源-可切换显示卡全局设置-还有其他省电方法，将前面的勾去掉 先关机，再开机，在电源设置中将快速启动关闭。 ","permalink":"https://blog.stolenzc.com/2020/window_issue/","summary":"分享一些Windows在使用时遇到的一些问题和一些解决办法，每个方法自己均实验过，确保能用，但不确保是最好的解决办法 AMD显卡开机黑屏 升级W","title":"Windows10中AMD显卡开机黑屏问题"},{"content":"软件合集\nListary Listary是一款Windows下非常好用的搜索工具，不论是搜文件，搜软件，速度都极快。下载地址：官网\n软件分为免费版和pro版，从个人使用来说，免费版已经足够使用了，使用双击Ctrl唤出搜索框，然后输入查找内容。该程序本质上来说只是搜索文件，但可以查找到软件的启动文件从而实现软件查找。还可以自定义配置，比如我在关键字\u0026gt;自定义中定义了psa，设置路径为C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe，并且勾选以管理员身份运行，那么在搜索框中输入psa就可以直接启动管理员身份的powershell。\nQuickLook 这也是一个继承Mac优秀体验的软件，通过空格键对文件进行快速预览，源码地址：QuickLook，相同功能的还有Seer\nQuickLook有个小问题，看html文件没法查看源代码，而是显示的渲染后的页面。但Seer是直接查看源代码。但不知道为什么，本人更喜欢QuickLook这款软件。\nQuickLook和Seer都没法直接查看office文件，需要安装相应的插件，而且安装了相应的插件后，预览速度也非常慢。这一点都没有什么好的解决办法。\nListen1 Listen1是一款开源的多平台听歌软件，源代码地址：Listen1桌面版、Listen1浏览器插件版\n说明：这款软件目前还能使用，但是虾米音乐的部分内容已经没法用了，最近的一次代码提交也是五个月之前（2019-11），所以可能这款软件已经成为了历史，不过依然还是能听QQ音乐、网易云音乐、酷狗音乐、酷我音乐、咪咕音乐的歌曲\n重要说明：该软件不支持缓存歌曲，所有歌曲均需要联网在线听。\nGeek Geek是一款非常优秀的软件卸载工具，下载地址：官网\n软件分为免费版和付费版，但我试用了付费版发现还没有免费版好用，该软件可以自动标记出新安装的软件，卸载完成后，会进行文件残留扫描和注册表清理，相对于控制面板中进行卸载能更彻底，\n重要说明：本人使用该软件卸载Windows Store app的时候，卸载完的app回自动恢复，推荐卸载Windows自带的app还是使用Win10设置或者使用Powershell进行卸载。\nVelocity Velocity是一款Windows下的开发文档查询手册，文档来源也是dash的源，下载地址Velocity官网，相同的还有Zeal\n两款软件大部分的docsets都来自于dash，Velocity支持第三方用户上传的docsets，例如可以下载djangorestframework手册，Zeal是通过第三方网站Zeal User Contributions来支持第三方手册的。Velocity的界面不如Zeal美观，而且两款软件下载docsets的速度都异常缓慢。此处推荐搭配网页版手册查询站使用Dev Docs\nVelocity并不是一款完全免费的软件，未付费使用会时常弹出8秒的弹框，但是不影响功能上的使用。\nFastCopy FastCopy是一款Windows下快速复制和备份的软件，下载地址：官方网址\nFastCopy最实用的场景为进程需要对大量琐碎文件进行备份。如果使用完全拷贝会花费大量的时间，如果进行差异拷贝，则同名文件不会进行拷贝，FastCopy可以按照文件的大小和最后修改时间进行备份，修改过的文件就拷贝，未修改过的文件就不拷贝，这样可以在极短的时间内进行全量备份。\nHeidiSQL HeidiSQL是一款程序员必备的SQL图形化客户端软件，下载地址：HeidiSQL官网\nHeidiSQL是一款免费的SQL图形化软件，支持MySQL、MariaDB、Microsoft SQL server、PostgreSQL。界面美观，功能强大、免费好用。\nTermius Termius是一款跨平台的SSH连接客户端，下载地址：Termius官网\nTermius最大的特点就是简洁美观，该软件可以免费使用。多个命令行窗口管理，还可以配置本地命令行工具，直接在软件内使用本机的命令行，配合多窗口管理，可以告别开多个cmd或powershell的时代。多窗口管理微软也推出了一款软件：Windows Terminal，安装推荐使用Microsoft Store\nPostman Postman是一款接口测试工具，提供了丰富的请求方式和便捷的参数传递方式，下载地址：Postman官网\n这里还推荐一款国内的接口测试工具，叫做ApiPost，纯中文支持，内存占用也比Postman小\nPotPlayer 超级好用的一款Windows本地视频播放器，下载地址：PotPlayer官网（该地址为墙外地址）\n作为本地视频播放器，国内也有不少，最出名的要数暴风影音、新版QQ影音。暴风影音有个最大的问题就是倍速播放声音会失真，QQ影音使用过一段时间，但总感觉用着不顺手，特别是快进和快退。当然不看本地视频内容这些软件就都没必要了。\nIDM Windows下最好用的下载器，下载地址：IDM官网，备用网址：IDM6.36\n该软件并不是免费软件，30天免费试用后需要购买才能继续使用，trial reset软件可以将试用时间重新调为30天，以此一直用下去。\n也可以使用Patch软件，按照安装说明注册，该方法通常更加稳定。\nVScode 这个软件不用介绍，最强大的编辑器，懂的自然懂，下载地址：VScode官网（访问速度经常感人）\nTypora 会对Markdown文件进行实时渲染的软件，用来看Markdown通常是最好的选择，下载地址：Typora官网\nPyCharm Python开发利器。如果是Python开发者，选它就对了，下载地址：Pycharm官网\nEdge 微软最新出品的基于chromium内核的浏览器，比Chrome更好用，支持同步，能直接访问扩展商店，多平台支持（当前还缺少Linux的支持），下载地址：Edge稳定版、Edge开发版\nm3u8+ffmpeg 该软件的介绍主要是为了补充IDM的功能，IDM拥有强大的站点抓取功能，许多在线观看的视频都能抓取到下载链接，但是现在出现了一种直播格式m3u8，该格式主要是将视频文件分为了许多ts文件，从而禁止视频的下载。此处提供的N_m3u8DL-CLI_v2.6.3.exe主要作用是解析m3u8文件，将其中的ts文件全部下载下来；ffmpeg.exe文件主要就是将所有的ts文件整合为一个视频文件，方便管理观看。\n重要说明：ffmpeg.exe文件需要放在N_m3u8DL-CLI_v2.6.3.exe同级目录下或者配置在环境变量中。\n下载地址：m3u8-download\n源码地址：N_m3u8DL-CLI\n","permalink":"https://blog.stolenzc.com/2020/windows_software_manual/","summary":"软件合集 Listary Listary是一款Windows下非常好用的搜索工具，不论是搜文件，搜软件，速度都极快。下载地址：官网 软件分为免费版和pro版，","title":"Windows必备的软件和安装方法"},{"content":"便捷查询Ubuntu的一些命令和使用的一些问题\n常用操作 更新软件源 管理员权限编辑/etc/apt/sources.list\n阿里云的源、清华大学的源\n常用命令 查看系统版本和内核版本 cat /proc/version - 查看内核版本，gcc版本，发布时间\nuname -a - 查看内核版本，系统是多少位的，x86_64为64位\nlsb_release -a - 查看系统的发行版本号和代号\n查看CPU、内存和磁盘 cat /proc/cpuinfo - 查看CPU详细信息\ncat /proc/meminfo - 查看内存信息\ndf - 查看磁盘使用信息\n包管理命令 sudo passwd root - 设置root用户密码\ndpkg --list - 显示所有软件\ndpkg -i package.deb - 安装deb包命令\n-i - 安装deb包 -c - 查看deb包 -r - 卸载deb包 -P - 彻底删除deb软件 apt/apt-get install - 安装软件包\ninstall - 安装软件包 remove - 移除软件包 purge - 移除软件包及配置文件 update - 刷新存储库索引 upgrade - 升级所有可升级的软件包 autoremove - 自动删除不需要的包 apt full-upgrade/apt-get dist-upgrade - 在升级软件包时自动处理依赖关系\napt search/apt-cache search - 搜索应用程序\napt show/apt-cache show - 显示安装细节\ndo-release-upgrade -d - 升级系统到开发版\n常见问题 update失败 此故障常见于WSL2上的Ubuntu，解决办法通常是编辑/etc/resolv.conf文件中将原来的nameserver修改为如下内容\n1 nameserver 8.8.8.8 ssh连接无法使用root 修改/etc/ssh/sshd_config文件把PermitRootLogin Prohibit-password添加#注释掉 在该文件中新添加PermitRootLogin yes 重启ssh服务/etc/init.d/ssh restart 重新使用root连接即可 新系统无法搜索到Wi-Fi 用超级管理员权限编辑文件\n1 2 # /etc/NetworkManager/NetworkManager.conf managed=true 参考文档：Ubuntu系统搜索不到WiFi，如何解决\n设置笔记本关闭盖子不做任何操作 用超级管理员权限编辑文件\n1 2 3 4 # /etc/systemd/logind.conf #HandleLidSwitch=suspend # 改为 HandleLidSwitch=ignore 参考文档：Ubuntu 禁用关闭笔记本盖子自动待机\n安装完Ubuntu后内置软件名称 1 sudo apt-get remove thunderbird totem rhythmbox empathy brasero simple-scan libreoffice-common ","permalink":"https://blog.stolenzc.com/2020/ubuntu/","summary":"便捷查询Ubuntu的一些命令和使用的一些问题 常用操作 更新软件源 管理员权限编辑/etc/apt/sources.list 阿里云的源、清华大学","title":"Ubuntu使用手册"},{"content":"关闭Windows Defender 定位到注册表计算机\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SecurityHealthService将start的值改为4即可。\n仅关闭defender实时保护 注册表计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender中新建DisableAntiSpyware，并双击赋值为1\n右下角时间显示秒 定位到计算机\\HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced 新建“DWORD 值”键入 ShowSecondsInSystemClock，修改“值”为1 重启电脑 锁屏界面设置显示秒 控制面板中\u0026rsquo;更改时间日期、数字格式\u0026gt;格式-其他设置\u0026gt;时间-时间格式-短格式:H:mm:ss\n重启电脑\n完全控制面板 新建文件夹命名为:GodMode.{ED7BA470-8E54-465E-825C-99712043E01C}\n更改字体 定位到\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts:(Microsoft YaHei \u0026amp; Microsoft YaHei UI (TrueType))和(Microsoft YaHei Bold \u0026amp; Microsoft YaHei UI Bold(TrueType))改为自己喜欢的字体即可.\n关闭资源管理器多余的图标 打开注册表编辑器 搜索并定位到 HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FolderDescriptions，此时你会看到很多长字符串； 我们的目的就是找出其中代表6个置顶文件夹的字符串，然后将其子项“PropertyBag”中的“ThisPCPolicy”由show改为Hide即可，具体对应关系如下： 图片：{0ddd015d-b06c-45d5-8c4c-f59713854639}＼PropertyBag 视频：{35286a68-3c57-41a1-bbb1-0eae73d76c95}＼PropertyBag 下载：{7d83ee9b-2244-4e70-b1f5-5393042af1e4}＼PropertyBag 音乐：{a0c69a99-21c8-4671-8703-7934162fcf1d}＼PropertyBag 桌面：{B4BFCC3A-DB2C-424C-B029-7FE99A87C641}＼PropertyBag 文档：{f42ee2d3-909f-4907-8871-4c22fc0bf756}＼PropertyBag 删除3D对象，HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace\\ 找到{0DB7E03F-FC29-4DC6-9020-FF41B59E513A}，删除它 卸载自带软件 以管理员身份运行powershell执行命令\nGet-AppxPackage | Select Name, PackageFullName - 获取软件包名\n人脉：get-appxpackage *Microsoft.People* | remove-appxpackage\n获取帮助：get-appxpackage *Microsoft.GetHelp* | remove-appxpackage\n","permalink":"https://blog.stolenzc.com/2020/windows_config/","summary":"关闭Windows Defender 定位到注册表计算机\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Servic","title":"Windows系统配置"},{"content":"Windows升级2004后，切换WSL1和WSL2的方法\n系统版本 Windows：Windows10 2004 19041.207\nLinux：Ubuntu 18.04LTS 20190521build\n切换WSL 1. 打开wsl 可以通过控制面板\u0026gt;程序\u0026gt;程序和功能\u0026gt;启用或关闭Windows功能，勾选适用于Linux的Windows子系统和启用虚拟机平台\n也可以通过powershell命令行进行开启\n1 2 3 4 # 启用虚拟机平台 Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform # 启用WSL Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux 注意：修改之后需要进行重启，虚拟机平台一定要启动，否则无法将Linux发行版转到WSL2上去\n2. 安装一个Linux 在Microsoft Store里面搜索Linux就可以看到许多支持WSL的Linux，选择一个你喜欢的进行下载，下载好后打开才会进行安装，直到提示输入用户名和密码，表示安装已经完成\n3. WSL1和WSL2的切换 WSL2的使用必须要Windows系统版本大于或等于Windows 10.0.18917\n命令 功能 wsl -l 列出当前所有安装的Linux发行版 wsl --set-version \u0026lt;Distro\u0026gt; 2 WSL版本的切换，\u0026lt;Distro\u0026gt;表示Linux发行版的名称，即wsl -l列出的名称 wsl --set-default-version 2 设置默认安装的Linux发行版都在WSL2上 wsl --list --verbose 查看所有安装的Linux发行版并且在哪个WSL上面。 wsl --shutdown 终止所有正在运行的Linux发行版和WSL2容器 注意：如果显示”WSL 2 需要更新其内核组件“，可以访问更新 WSL 2 Linux 内核进行下载更新包。\n","permalink":"https://blog.stolenzc.com/2020/wsl/","summary":"Windows升级2004后，切换WSL1和WSL2的方法 系统版本 Windows：Windows10 2004 19041.207 Linux：Ubuntu 18.04LTS 20190521build 切换WS","title":"Windows启用WSL2"},{"content":"Hexo + Next搭建博客是许多人搭建博客的第一选择，但是要想搭建好博客，让其按照自己的想法进行展示，许多网上的资料要不就是老版本的，要不就是拷贝粘贴的别人的，实际上根本没法用的，这里我按照自己的配置过程写一篇教程，每个配置在我使用的版本上保证可用。\n注意：本文只介绍一些容易带坑的配置和个性化配置，常规配置或Hexo的博客搭建过程详见Hexo博客搭建\n适用版本 Hexo：4.2.0\nOS：Windows 10 1909 （18636.752）\nNext：7.8.0\nNode：12.1.0\nHexo配置 Language 配置注意：language如果配置为中文，网上许多教程写的应该用zh-Hans，实际上应该使用主题中提供的字体包名，例如我使用Next7.8.0，中文字体包叫做zh-CN，所以此处就应该配置为\n1 2 # site language: zh-CN 创建tags/categories/about 在cmd命令行中进入hexo的目录下\n执行hexo new pages \u0026quot;tags/categories/about\u0026quot;\n会在hexo/sources/目录下创建相应的文件夹，文件夹下有一个index.md文件\ntitle网页上显示的名称，可以进行自定义\n添加type: tags/categories\n最后配置如下：\n1 2 3 title: 分类 date: 2020-04-12 10:59:21 type: categories 注意：archives和about不需要设置type，会自动生成页面，如果对于关于我的页面需要定制，直接在hexo/source/about/index.md中进行编辑即可\n在文章开头添加yaml批注就能自动进行分类归档了。\n注意：yaml的批注是--- ---包裹的内容，\n例如：\n1 2 3 4 5 6 7 8 9 10 11 12 --- date: 2020-04-11 21:01:24 updated: 2020-04-12 15:16:24 tags: - Windows - Linux - Hexo - 教程 categories: - 教程 - Hexo --- 注意：tags下的标签是并列关系，categories下的标签是父子关系\n文章加密 1 npm install --save hexo-blog-encrypt 安装该插件，然后在文章的yaml配置中添加：\n1 2 password: password abstract: 有东西被加密了, 请输入密码查看. 高级配置详见hexo-blog-encrypt\nNext配置 网页图标 网页title前的link图标，一般只需要配置small，但是保险起见可以将small和medium都配置好，图片需要是ico格式（我使用png格式不显示，但是默认配置的png图片能显示），图片的位置放在/hexo/themes/next/source/images/下，配置如下：\n1 2 3 favicon: small: /images/favicon.ico medium: /images/favicon.ico 主题选择 Next提供了四种风格的主题，可以根据个人喜好进行配置，具体样式见Muse、Mist、Pisces、Gemini\n1 2 3 4 5 # Schemes #scheme: Muse scheme: Mist #scheme: Pisces #scheme: Gemini 顶部菜单 menu配置的是网页顶部的导航链接，可以按照自己的需求配置，前面是显示的文件，中间为链接，||后面的为图标，如果需要自定义链接，建议将所有的图标都去掉，以免影响整体美观\n1 2 3 4 5 6 menu: 首页: / || fa fa-home 标签: /tags/ || fa fa-tags 分类: /categories/ || fa fa-th 归档: /archives/ || fa fa-archive 关于: /about/ || fa fa-user 侧边栏位置 sidebar主要配置在文章中或者在其他页面显示文章目录或站点概览的位置\n1 2 3 4 sidebar: # Sidebar Position. #position: left position: right 个人头像 avatar配置的是站点概览的头像，默认是没有头像的，可以自定义配置一张，rounded为裁剪为圆形，rotated为跟随鼠标转动\n1 2 3 4 avatar: url: /images/header.jpg rounded: false rotated: false 个人社交 social配置的是站点概览的个人社交地址，可以按照自己使用自定义，||后面的是站点的图标，可以用social_icons来定义显示方式\n1 2 3 4 5 6 7 8 social: GitHub: https://github.com/stolenzc || fab fa-github Weibo: https://weibo.com/u/3333060672 || fab fa-weibo social_icons: enable: true icons_only: false transition: true 个人页关联网站 links配置的是站点概览的个人链接，可以自定义一些链接在里面快速跳转，用links_settings来配置显示方式\n1 2 3 4 5 6 7 8 9 10 links: 个人网站: https://www.stolenzc.com 日程管理: https://schedule.stolenzc.com/schedule/ gitee主页: https://stolenzc.gitee.io links_settings: icon: fa fa-link title: Links # Available values: block | inline layout: inline 首页文章预览 Next默认首页是显示文章的全部内容，但是这样会显得首页非常凌乱，网上说的使用auto_excerpt来配置预览字数，但是我是用的7.8.0已经没有了该配置，正确的配置有两种方法\n在文章开头的yaml配置中添加description，然后设置excerpt_description为true 编辑markdown文件在你想要截断的地方添加\u0026lt;!-- more --\u0026gt;，文章显示出来就会在此处截断，并且会添加一个阅读全文的链接（官方推荐） 添加访问统计 在hexo/themes/next/_config.yml中找到footer并添加：\n1 2 footer: counter: true 找到busuanzi_count并将enable改为true\n1 2 busuanzi_count: enable: true 在hexo/themes/next/layout/_partials/footer.swig最后添加：\n1 2 3 {% if theme.footer.counter %} \u0026lt;script async src=\u0026#34;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {% endif %} 文末结束标记 在路径hexo\\themes\\next\\layout\\_macro文件夹中新建passage-end-tag.swig文件，编辑内容\n1 2 3 4 5 \u0026lt;div\u0026gt; {% if not is_index %} \u0026lt;div style=\u0026#34;text-align:center;color: #ccc;font-size:14px;\u0026#34;\u0026gt;-------------本文结束\u0026lt;i class=\u0026#34;fa fa-paw\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;感谢您的阅读-------------\u0026lt;/div\u0026gt; {% endif %} \u0026lt;/div\u0026gt; 打开hexo\\themes\\next\\layout\\_macro\\post.swig，在END POST BODY后面添加以下代码：\n1 2 3 4 5 \u0026lt;div\u0026gt; {% if not is_index %} {% include \u0026#39;passage-end-tag.swig\u0026#39; %} {% endif %} \u0026lt;/div\u0026gt; 修改主题配置文件_config.yml，在末尾添加：\n1 2 passage_end_tag: enabled: true 文章字数和时间统计 安装插件npm install hexo-symbols-count-time\n配置hexo的_config.yml设置：\n1 2 3 4 5 6 7 8 9 symbols_count_time: symbols: true time: true total_symbols: true total_time: true exclude_codeblock: false awl: 4 wpm: 275 suffix: \u0026#34;mins.\u0026#34; 设置含义参考：hexo-symbols-count-time\n配置搜索功能 NexT题支持集成 Swiftype、 微搜索、Local Search 和 Algolia。本文介绍Local Search的安装。\n安装hexo-generator-search和hexo-generator-searchdb\n1 2 npm install hexo-generator-search --save npm install hexo-generator-searchdb --save 编辑hexo的_config.yml配置，在末尾添加：\n1 2 3 4 5 search: path: search.xml field: post format: html limit: 10000 编辑NexT的_config.yml配置，将local-search设置修改为true：\n1 2 local_search: enable: ture 来必力评论 在来必力网站注册账号，创建一个应用 进入应用找到配置的代码，将date-uid后面的内容拷贝下来 打开Next的_config.yml文件，找到livere_uid，将刚刚拷贝下来的id粘贴在后面 显示的详细配置在来必力管理页面中进行配置 配置首页隐藏文章 编辑themes/next/layout/index.swig，添加以下代码的第三行和第五行\n1 2 3 4 5 6 7 \u0026lt;div class=\u0026#34;posts-expand\u0026#34;\u0026gt; {%- for post in page.posts.toArray() %} {%- if post.hidden != true %} {{ partial(\u0026#39;_macro/post.swig\u0026#39;, {post: post, is_index: true}) }} {%- endif %} {%- endfor %} \u0026lt;/div\u0026gt; 编辑scaffolds/post.md，添加一下代码的第四行\n1 2 3 4 5 6 --- title: {{ title }} date: {{ date }} hidden: false tags: --- 在使用时，文章最顶部添加hidden: True即可在博客首页隐藏文章\n跳过指定文件的渲染 编辑_config.yaml\n1 skip_render: [_posts/*] 支持正则表达式\n更多配置参考：Hexo-NexT配置超炫网页效果\n","permalink":"https://blog.stolenzc.com/2020/hexo_next/","summary":"Hexo + Next搭建博客是许多人搭建博客的第一选择，但是要想搭建好博客，让其按照自己的想法进行展示，许多网上的资料要不就是老版本的，要不就是拷贝","title":"Hexo+Next部署博客配置及注意事项"},{"content":"利用github/gitee和node.js快捷进行个人博客的搭建。\n1. 环境准备 git安装 Windows：进入git官网下载Windows安装包进行安装即可，官网下载速度慢可以使用淘宝镜像\nLinux：通过包管理工具安装git或进入git官网选择tarballs进入下载归档文件进行源代码构建安装\nNode.js安装 可以进入淘宝镜像进行下载安装包或归档文件进行安装，注意添加环境变量\n2. 安装Hexo npm install -g hexo-cli\n3. Hexo工程创建 建立一个Hexo的工程目录，进入该目录 hexo init 进行初始化 npm install安装相关依赖 4. 文件说明 项目结构：\n1 2 3 4 5 6 7 8 . ├── _config.yml ├── package.json ├── scaffolds ├── source | ├── _drafts | └── _posts └── themes _config.yml：网站的配置信息，您可以在此配置大部分的参数。详细配置见配置\npackage.json：应用程序的信息。EJS, Stylus和 Markdown renderer 已默认安装，您可以自由移除。\nscaffolds：模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。\nsource：资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。\nthemes：主题 文件夹。Hexo 会根据主题来生成静态页面。\n5. 相关命令 命令详解 hexo init [folder]：新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。\nhexo new [layout] \u0026lt;title\u0026gt;：新建一篇文章。如果没有设置 layout 的话，默认使用_config.yml中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。\nhexo generate：生成静态文件，可以简写为hexo g\n-d，\u0026ndash;deploy：生成文件后立即部署 -w，\u0026ndash;watch：监视文件变动 hexo publish [layout] \u0026lt;filename\u0026gt;：发表草稿\nhexo server：启动服务器，默认在4000端口\n-p，\u0026ndash;port：重设端口 -s，\u0026ndash;static：只使用静态文件 -l，\u0026ndash;log：启动日记记录，使用覆盖记录格式 hexo deploy：部署网站，可以简写为hexo d\n-g，\u0026ndash;generate：部署之前预先生成静态文件 hexo render \u0026lt;file1\u0026gt; [file2]...：渲染文件\n-o，\u0026ndash;output：设置输出路径 hexo migrate \u0026lt;type\u0026gt;：从其他博客系统迁移内容\nhexo clean：清除缓存文件和已生成的静态文件\nhexo version：显示Hexo版本\n本地部署 启动服务器：hexo server\n内容修改后刷新重启：hexo clean hexo generate/g hexo deploy/d hexo server\n在线部署 修改_config.yml最后添加\n1 2 3 4 deploy: type: git repository: https://github.com/你的GitHub名/你的GitHub名.github.io.git branch: master 使用git部署, 输入指令npm install hexo-deployer-git --save\n输入指令hexo clean hexo generate hexo deploy 对博客进行提交\n该指令可以简化为hexo clean \u0026amp;\u0026amp; hexo d -g\n参考内容：Hexo文档\n","permalink":"https://blog.stolenzc.com/2020/hexo/","summary":"利用github/gitee和node.js快捷进行个人博客的搭建。 1. 环境准备 git安装 Windows：进入git官网下载Windows安装","title":"Hexo博客搭建"},{"content":"","permalink":"https://blog.stolenzc.com/tags/","summary":"tags","title":"标签"},{"content":"","permalink":"https://blog.stolenzc.com/categories/","summary":"categories","title":"分类"},{"content":"STOLENZC\n大脑放不下的杂物仓库\n简介：一个热爱技术和代码的小码农\nEmail：stolenzc@88.com\n期待着彩虹，所以开了窗\n窗外只有灼热闪光\n所谓的彩虹，不过就是光\n只要心还透明，就能折射希望\n向大佬迈进\n站点关联： 日程计划\n","permalink":"https://blog.stolenzc.com/about/","summary":"about","title":"关于我"}]